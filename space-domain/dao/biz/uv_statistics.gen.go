// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package biz

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newUVStatistic(db *gorm.DB, opts ...gen.DOOption) uVStatistic {
	_uVStatistic := uVStatistic{}

	_uVStatistic.uVStatisticDo.UseDB(db, opts...)
	_uVStatistic.uVStatisticDo.UseModel(&model.UVStatistic{})

	tableName := _uVStatistic.uVStatisticDo.TableName()
	_uVStatistic.ALL = field.NewAsterisk(tableName)
	_uVStatistic.ID = field.NewInt64(tableName, "id")
	_uVStatistic.CreatedAt = field.NewInt64(tableName, "created_at")
	_uVStatistic.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_uVStatistic.Hide = field.NewInt(tableName, "hide")
	_uVStatistic.VisitorHash = field.NewString(tableName, "visitor_hash")
	_uVStatistic.IP = field.NewString(tableName, "ip")
	_uVStatistic.IPSource = field.NewString(tableName, "ip_source")
	_uVStatistic.UserAgent = field.NewString(tableName, "user_agent")
	_uVStatistic.ClientName = field.NewString(tableName, "client_name")
	_uVStatistic.IsMobile = field.NewInt(tableName, "is_mobile")
	_uVStatistic.LikeBot = field.NewInt(tableName, "like_bot")
	_uVStatistic.OS = field.NewString(tableName, "os")
	_uVStatistic.VisitTime = field.NewInt64(tableName, "visit_time")
	_uVStatistic.VisitDate = field.NewString(tableName, "visit_date")

	_uVStatistic.fillFieldMap()

	return _uVStatistic
}

type uVStatistic struct {
	uVStatisticDo uVStatisticDo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Int64
	UpdatedAt   field.Int64
	Hide        field.Int
	VisitorHash field.String
	IP          field.String
	IPSource    field.String
	UserAgent   field.String
	ClientName  field.String
	IsMobile    field.Int
	LikeBot     field.Int
	OS          field.String
	VisitTime   field.Int64
	VisitDate   field.String

	fieldMap map[string]field.Expr
}

func (u uVStatistic) Table(newTableName string) *uVStatistic {
	u.uVStatisticDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uVStatistic) As(alias string) *uVStatistic {
	u.uVStatisticDo.DO = *(u.uVStatisticDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uVStatistic) updateTableName(table string) *uVStatistic {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.Hide = field.NewInt(table, "hide")
	u.VisitorHash = field.NewString(table, "visitor_hash")
	u.IP = field.NewString(table, "ip")
	u.IPSource = field.NewString(table, "ip_source")
	u.UserAgent = field.NewString(table, "user_agent")
	u.ClientName = field.NewString(table, "client_name")
	u.IsMobile = field.NewInt(table, "is_mobile")
	u.LikeBot = field.NewInt(table, "like_bot")
	u.OS = field.NewString(table, "os")
	u.VisitTime = field.NewInt64(table, "visit_time")
	u.VisitDate = field.NewString(table, "visit_date")

	u.fillFieldMap()

	return u
}

func (u *uVStatistic) WithContext(ctx context.Context) IUVStatisticDo {
	return u.uVStatisticDo.WithContext(ctx)
}

func (u uVStatistic) TableName() string { return u.uVStatisticDo.TableName() }

func (u uVStatistic) Alias() string { return u.uVStatisticDo.Alias() }

func (u uVStatistic) Columns(cols ...field.Expr) gen.Columns { return u.uVStatisticDo.Columns(cols...) }

func (u *uVStatistic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uVStatistic) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["hide"] = u.Hide
	u.fieldMap["visitor_hash"] = u.VisitorHash
	u.fieldMap["ip"] = u.IP
	u.fieldMap["ip_source"] = u.IPSource
	u.fieldMap["user_agent"] = u.UserAgent
	u.fieldMap["client_name"] = u.ClientName
	u.fieldMap["is_mobile"] = u.IsMobile
	u.fieldMap["like_bot"] = u.LikeBot
	u.fieldMap["os"] = u.OS
	u.fieldMap["visit_time"] = u.VisitTime
	u.fieldMap["visit_date"] = u.VisitDate
}

func (u uVStatistic) clone(db *gorm.DB) uVStatistic {
	u.uVStatisticDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uVStatistic) replaceDB(db *gorm.DB) uVStatistic {
	u.uVStatisticDo.ReplaceDB(db)
	return u
}

type uVStatisticDo struct{ gen.DO }

type IUVStatisticDo interface {
	gen.SubQuery
	Debug() IUVStatisticDo
	WithContext(ctx context.Context) IUVStatisticDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUVStatisticDo
	WriteDB() IUVStatisticDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUVStatisticDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUVStatisticDo
	Not(conds ...gen.Condition) IUVStatisticDo
	Or(conds ...gen.Condition) IUVStatisticDo
	Select(conds ...field.Expr) IUVStatisticDo
	Where(conds ...gen.Condition) IUVStatisticDo
	Order(conds ...field.Expr) IUVStatisticDo
	Distinct(cols ...field.Expr) IUVStatisticDo
	Omit(cols ...field.Expr) IUVStatisticDo
	Join(table schema.Tabler, on ...field.Expr) IUVStatisticDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUVStatisticDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUVStatisticDo
	Group(cols ...field.Expr) IUVStatisticDo
	Having(conds ...gen.Condition) IUVStatisticDo
	Limit(limit int) IUVStatisticDo
	Offset(offset int) IUVStatisticDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUVStatisticDo
	Unscoped() IUVStatisticDo
	Create(values ...*model.UVStatistic) error
	CreateInBatches(values []*model.UVStatistic, batchSize int) error
	Save(values ...*model.UVStatistic) error
	First() (*model.UVStatistic, error)
	Take() (*model.UVStatistic, error)
	Last() (*model.UVStatistic, error)
	Find() ([]*model.UVStatistic, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UVStatistic, err error)
	FindInBatches(result *[]*model.UVStatistic, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UVStatistic) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUVStatisticDo
	Assign(attrs ...field.AssignExpr) IUVStatisticDo
	Joins(fields ...field.RelationField) IUVStatisticDo
	Preload(fields ...field.RelationField) IUVStatisticDo
	FirstOrInit() (*model.UVStatistic, error)
	FirstOrCreate() (*model.UVStatistic, error)
	FindByPage(offset int, limit int) (result []*model.UVStatistic, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUVStatisticDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.UVStatistic, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (u uVStatisticDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.UVStatistic, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM uv_statistics ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(u.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(u.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(u.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(u.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(u.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(u.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u uVStatisticDo) Debug() IUVStatisticDo {
	return u.withDO(u.DO.Debug())
}

func (u uVStatisticDo) WithContext(ctx context.Context) IUVStatisticDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uVStatisticDo) ReadDB() IUVStatisticDo {
	return u.Clauses(dbresolver.Read)
}

func (u uVStatisticDo) WriteDB() IUVStatisticDo {
	return u.Clauses(dbresolver.Write)
}

func (u uVStatisticDo) Session(config *gorm.Session) IUVStatisticDo {
	return u.withDO(u.DO.Session(config))
}

func (u uVStatisticDo) Clauses(conds ...clause.Expression) IUVStatisticDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uVStatisticDo) Returning(value interface{}, columns ...string) IUVStatisticDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uVStatisticDo) Not(conds ...gen.Condition) IUVStatisticDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uVStatisticDo) Or(conds ...gen.Condition) IUVStatisticDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uVStatisticDo) Select(conds ...field.Expr) IUVStatisticDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uVStatisticDo) Where(conds ...gen.Condition) IUVStatisticDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uVStatisticDo) Order(conds ...field.Expr) IUVStatisticDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uVStatisticDo) Distinct(cols ...field.Expr) IUVStatisticDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uVStatisticDo) Omit(cols ...field.Expr) IUVStatisticDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uVStatisticDo) Join(table schema.Tabler, on ...field.Expr) IUVStatisticDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uVStatisticDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUVStatisticDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uVStatisticDo) RightJoin(table schema.Tabler, on ...field.Expr) IUVStatisticDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uVStatisticDo) Group(cols ...field.Expr) IUVStatisticDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uVStatisticDo) Having(conds ...gen.Condition) IUVStatisticDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uVStatisticDo) Limit(limit int) IUVStatisticDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uVStatisticDo) Offset(offset int) IUVStatisticDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uVStatisticDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUVStatisticDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uVStatisticDo) Unscoped() IUVStatisticDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uVStatisticDo) Create(values ...*model.UVStatistic) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uVStatisticDo) CreateInBatches(values []*model.UVStatistic, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uVStatisticDo) Save(values ...*model.UVStatistic) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uVStatisticDo) First() (*model.UVStatistic, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UVStatistic), nil
	}
}

func (u uVStatisticDo) Take() (*model.UVStatistic, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UVStatistic), nil
	}
}

func (u uVStatisticDo) Last() (*model.UVStatistic, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UVStatistic), nil
	}
}

func (u uVStatisticDo) Find() ([]*model.UVStatistic, error) {
	result, err := u.DO.Find()
	return result.([]*model.UVStatistic), err
}

func (u uVStatisticDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UVStatistic, err error) {
	buf := make([]*model.UVStatistic, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uVStatisticDo) FindInBatches(result *[]*model.UVStatistic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uVStatisticDo) Attrs(attrs ...field.AssignExpr) IUVStatisticDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uVStatisticDo) Assign(attrs ...field.AssignExpr) IUVStatisticDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uVStatisticDo) Joins(fields ...field.RelationField) IUVStatisticDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uVStatisticDo) Preload(fields ...field.RelationField) IUVStatisticDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uVStatisticDo) FirstOrInit() (*model.UVStatistic, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UVStatistic), nil
	}
}

func (u uVStatisticDo) FirstOrCreate() (*model.UVStatistic, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UVStatistic), nil
	}
}

func (u uVStatisticDo) FindByPage(offset int, limit int) (result []*model.UVStatistic, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uVStatisticDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uVStatisticDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uVStatisticDo) Delete(models ...*model.UVStatistic) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uVStatisticDo) withDO(do gen.Dao) *uVStatisticDo {
	u.DO = *do.(*gen.DO)
	return u
}
