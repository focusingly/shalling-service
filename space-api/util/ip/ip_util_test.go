package ip_test

import (
	"fmt"
	"space-api/util/ip"
	"testing"
)

func TestIpUtil(t *testing.T) {
	ips := []string{
		"8.8.8.8", "8.8.4.4", "1.1.1.1", "1.0.0.1", "208.67.222.222",
		"208.67.220.220", "9.9.9.9", "64.6.64.6", "64.6.65.6", "4.2.2.2",
		"4.2.2.1", "208.201.239.38", "8.8.8.1", "8.8.4.1", "8.8.8.2",
		"8.8.4.2", "208.67.222.220", "208.69.38.10", "208.69.40.2", "9.9.9.10",
		"9.9.9.11", "1.1.1.2", "1.0.0.2", "208.67.220.222", "8.8.8.8",
		"8.8.8.9", "8.8.4.5", "209.244.0.3", "209.244.0.4", "72.14.190.98",
		"216.239.32.10", "72.14.220.5", "199.85.126.10", "199.85.127.10", "74.82.42.42",
		"216.146.35.35", "198.41.0.4", "208.91.112.53", "37.120.29.1", "185.28.190.38",
		"199.85.126.20", "199.85.127.20", "52.62.0.10", "69.192.104.1", "73.252.95.10",
		"104.16.5.2", "185.28.190.39", "103.21.244.0", "104.16.14.0", "99.99.99.99",
		"208.91.112.52", "108.170.222.222", "192.5.5.241", "192.5.5.243", "192.41.162.30",
		"38.121.108.92", "77.88.8.8", "77.88.8.1", "213.186.33.99", "80.80.80.80",
		"185.84.140.0", "152.67.1.0", "213.130.37.245", "176.9.0.0", "185.86.151.4",
		"83.217.4.4", "185.23.50.50", "209.244.0.0", "198.51.100.100", "203.0.113.100",
		"204.232.175.90", "131.107.255.255", "8.8.8.7", "130.211.13.10", "192.168.9.100",
		"94.140.14.14", "94.140.15.15", "185.83.211.10", "52.214.46.14", "52.62.101.12",
		"185.228.169.11", "62.210.128.101", "91.189.94.4", "185.22.200.10", "99.101.33.22",
		"64.25.29.14", "52.37.20.15", "195.8.68.3", "139.130.4.4", "103.80.51.0",
		"208.76.82.80", "192.9.9.9", "8.8.8.10", "8.8.4.10", "213.219.66.1",
		"173.194.39.78", "207.67.34.8", "65.55.214.100", "104.91.32.22", "207.46.232.1",
		"45.32.61.34",
	}

	searcher := ip.GetIpSearcher()

	for index, ipStr := range ips {
		v, err := ip.Ipv4StringToU32(ipStr)

		if err != nil {
			t.Fatalf("invalid ip address: %d; %s", index+1, ipStr)
		}
		if region, err := searcher.Search(v); err != nil {
			t.Fatalf("during parse the %d ip: %s, got an error: %#v", index+1, ipStr, err)
		} else {
			fmt.Printf("Ip: %s region is: %s\n", ipStr, region)
		}
	}
}
