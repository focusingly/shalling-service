// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package biz

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newPubSocialMedia(db *gorm.DB, opts ...gen.DOOption) pubSocialMedia {
	_pubSocialMedia := pubSocialMedia{}

	_pubSocialMedia.pubSocialMediaDo.UseDB(db, opts...)
	_pubSocialMedia.pubSocialMediaDo.UseModel(&model.PubSocialMedia{})

	tableName := _pubSocialMedia.pubSocialMediaDo.TableName()
	_pubSocialMedia.ALL = field.NewAsterisk(tableName)
	_pubSocialMedia.Id = field.NewInt64(tableName, "id")
	_pubSocialMedia.CreatedAt = field.NewInt64(tableName, "created_at")
	_pubSocialMedia.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_pubSocialMedia.Hide = field.NewUint8(tableName, "hide")
	_pubSocialMedia.DisplayName = field.NewString(tableName, "display_name")
	_pubSocialMedia.IconURL = field.NewString(tableName, "icon_url")
	_pubSocialMedia.OpenUrl = field.NewString(tableName, "open_url")

	_pubSocialMedia.fillFieldMap()

	return _pubSocialMedia
}

type pubSocialMedia struct {
	pubSocialMediaDo pubSocialMediaDo

	ALL         field.Asterisk
	Id          field.Int64
	CreatedAt   field.Int64
	UpdatedAt   field.Int64
	Hide        field.Uint8
	DisplayName field.String
	IconURL     field.String
	OpenUrl     field.String

	fieldMap map[string]field.Expr
}

func (p pubSocialMedia) Table(newTableName string) *pubSocialMedia {
	p.pubSocialMediaDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pubSocialMedia) As(alias string) *pubSocialMedia {
	p.pubSocialMediaDo.DO = *(p.pubSocialMediaDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pubSocialMedia) updateTableName(table string) *pubSocialMedia {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewInt64(table, "id")
	p.CreatedAt = field.NewInt64(table, "created_at")
	p.UpdatedAt = field.NewInt64(table, "updated_at")
	p.Hide = field.NewUint8(table, "hide")
	p.DisplayName = field.NewString(table, "display_name")
	p.IconURL = field.NewString(table, "icon_url")
	p.OpenUrl = field.NewString(table, "open_url")

	p.fillFieldMap()

	return p
}

func (p *pubSocialMedia) WithContext(ctx context.Context) IPubSocialMediaDo {
	return p.pubSocialMediaDo.WithContext(ctx)
}

func (p pubSocialMedia) TableName() string { return p.pubSocialMediaDo.TableName() }

func (p pubSocialMedia) Alias() string { return p.pubSocialMediaDo.Alias() }

func (p pubSocialMedia) Columns(cols ...field.Expr) gen.Columns {
	return p.pubSocialMediaDo.Columns(cols...)
}

func (p *pubSocialMedia) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pubSocialMedia) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.Id
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["hide"] = p.Hide
	p.fieldMap["display_name"] = p.DisplayName
	p.fieldMap["icon_url"] = p.IconURL
	p.fieldMap["open_url"] = p.OpenUrl
}

func (p pubSocialMedia) clone(db *gorm.DB) pubSocialMedia {
	p.pubSocialMediaDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pubSocialMedia) replaceDB(db *gorm.DB) pubSocialMedia {
	p.pubSocialMediaDo.ReplaceDB(db)
	return p
}

type pubSocialMediaDo struct{ gen.DO }

type IPubSocialMediaDo interface {
	gen.SubQuery
	Debug() IPubSocialMediaDo
	WithContext(ctx context.Context) IPubSocialMediaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPubSocialMediaDo
	WriteDB() IPubSocialMediaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPubSocialMediaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPubSocialMediaDo
	Not(conds ...gen.Condition) IPubSocialMediaDo
	Or(conds ...gen.Condition) IPubSocialMediaDo
	Select(conds ...field.Expr) IPubSocialMediaDo
	Where(conds ...gen.Condition) IPubSocialMediaDo
	Order(conds ...field.Expr) IPubSocialMediaDo
	Distinct(cols ...field.Expr) IPubSocialMediaDo
	Omit(cols ...field.Expr) IPubSocialMediaDo
	Join(table schema.Tabler, on ...field.Expr) IPubSocialMediaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPubSocialMediaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPubSocialMediaDo
	Group(cols ...field.Expr) IPubSocialMediaDo
	Having(conds ...gen.Condition) IPubSocialMediaDo
	Limit(limit int) IPubSocialMediaDo
	Offset(offset int) IPubSocialMediaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPubSocialMediaDo
	Unscoped() IPubSocialMediaDo
	Create(values ...*model.PubSocialMedia) error
	CreateInBatches(values []*model.PubSocialMedia, batchSize int) error
	Save(values ...*model.PubSocialMedia) error
	First() (*model.PubSocialMedia, error)
	Take() (*model.PubSocialMedia, error)
	Last() (*model.PubSocialMedia, error)
	Find() ([]*model.PubSocialMedia, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PubSocialMedia, err error)
	FindInBatches(result *[]*model.PubSocialMedia, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PubSocialMedia) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPubSocialMediaDo
	Assign(attrs ...field.AssignExpr) IPubSocialMediaDo
	Joins(fields ...field.RelationField) IPubSocialMediaDo
	Preload(fields ...field.RelationField) IPubSocialMediaDo
	FirstOrInit() (*model.PubSocialMedia, error)
	FirstOrCreate() (*model.PubSocialMedia, error)
	FindByPage(offset int, limit int) (result []*model.PubSocialMedia, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPubSocialMediaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.PubSocialMedia, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (p pubSocialMediaDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.PubSocialMedia, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM pub_social_media ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(p.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(p.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(p.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(p.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(p.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(p.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p pubSocialMediaDo) Debug() IPubSocialMediaDo {
	return p.withDO(p.DO.Debug())
}

func (p pubSocialMediaDo) WithContext(ctx context.Context) IPubSocialMediaDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pubSocialMediaDo) ReadDB() IPubSocialMediaDo {
	return p.Clauses(dbresolver.Read)
}

func (p pubSocialMediaDo) WriteDB() IPubSocialMediaDo {
	return p.Clauses(dbresolver.Write)
}

func (p pubSocialMediaDo) Session(config *gorm.Session) IPubSocialMediaDo {
	return p.withDO(p.DO.Session(config))
}

func (p pubSocialMediaDo) Clauses(conds ...clause.Expression) IPubSocialMediaDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pubSocialMediaDo) Returning(value interface{}, columns ...string) IPubSocialMediaDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pubSocialMediaDo) Not(conds ...gen.Condition) IPubSocialMediaDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pubSocialMediaDo) Or(conds ...gen.Condition) IPubSocialMediaDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pubSocialMediaDo) Select(conds ...field.Expr) IPubSocialMediaDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pubSocialMediaDo) Where(conds ...gen.Condition) IPubSocialMediaDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pubSocialMediaDo) Order(conds ...field.Expr) IPubSocialMediaDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pubSocialMediaDo) Distinct(cols ...field.Expr) IPubSocialMediaDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pubSocialMediaDo) Omit(cols ...field.Expr) IPubSocialMediaDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pubSocialMediaDo) Join(table schema.Tabler, on ...field.Expr) IPubSocialMediaDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pubSocialMediaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPubSocialMediaDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pubSocialMediaDo) RightJoin(table schema.Tabler, on ...field.Expr) IPubSocialMediaDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pubSocialMediaDo) Group(cols ...field.Expr) IPubSocialMediaDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pubSocialMediaDo) Having(conds ...gen.Condition) IPubSocialMediaDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pubSocialMediaDo) Limit(limit int) IPubSocialMediaDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pubSocialMediaDo) Offset(offset int) IPubSocialMediaDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pubSocialMediaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPubSocialMediaDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pubSocialMediaDo) Unscoped() IPubSocialMediaDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pubSocialMediaDo) Create(values ...*model.PubSocialMedia) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pubSocialMediaDo) CreateInBatches(values []*model.PubSocialMedia, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pubSocialMediaDo) Save(values ...*model.PubSocialMedia) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pubSocialMediaDo) First() (*model.PubSocialMedia, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubSocialMedia), nil
	}
}

func (p pubSocialMediaDo) Take() (*model.PubSocialMedia, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubSocialMedia), nil
	}
}

func (p pubSocialMediaDo) Last() (*model.PubSocialMedia, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubSocialMedia), nil
	}
}

func (p pubSocialMediaDo) Find() ([]*model.PubSocialMedia, error) {
	result, err := p.DO.Find()
	return result.([]*model.PubSocialMedia), err
}

func (p pubSocialMediaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PubSocialMedia, err error) {
	buf := make([]*model.PubSocialMedia, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pubSocialMediaDo) FindInBatches(result *[]*model.PubSocialMedia, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pubSocialMediaDo) Attrs(attrs ...field.AssignExpr) IPubSocialMediaDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pubSocialMediaDo) Assign(attrs ...field.AssignExpr) IPubSocialMediaDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pubSocialMediaDo) Joins(fields ...field.RelationField) IPubSocialMediaDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pubSocialMediaDo) Preload(fields ...field.RelationField) IPubSocialMediaDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pubSocialMediaDo) FirstOrInit() (*model.PubSocialMedia, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubSocialMedia), nil
	}
}

func (p pubSocialMediaDo) FirstOrCreate() (*model.PubSocialMedia, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PubSocialMedia), nil
	}
}

func (p pubSocialMediaDo) FindByPage(offset int, limit int) (result []*model.PubSocialMedia, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pubSocialMediaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pubSocialMediaDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pubSocialMediaDo) Delete(models ...*model.PubSocialMedia) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pubSocialMediaDo) withDO(do gen.Dao) *pubSocialMediaDo {
	p.DO = *do.(*gen.DO)
	return p
}
