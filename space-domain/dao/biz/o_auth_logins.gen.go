// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package biz

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newOAuthLogin(db *gorm.DB, opts ...gen.DOOption) oAuthLogin {
	_oAuthLogin := oAuthLogin{}

	_oAuthLogin.oAuthLoginDo.UseDB(db, opts...)
	_oAuthLogin.oAuthLoginDo.UseModel(&model.OAuthLogin{})

	tableName := _oAuthLogin.oAuthLoginDo.TableName()
	_oAuthLogin.ALL = field.NewAsterisk(tableName)
	_oAuthLogin.Id = field.NewInt64(tableName, "id")
	_oAuthLogin.CreatedAt = field.NewInt64(tableName, "created_at")
	_oAuthLogin.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_oAuthLogin.Hide = field.NewUint8(tableName, "hide")
	_oAuthLogin.PlatformName = field.NewString(tableName, "platform_name")
	_oAuthLogin.PlatformUserId = field.NewInt64(tableName, "platform_user_id")
	_oAuthLogin.PrimaryEmail = field.NewString(tableName, "primary_email")
	_oAuthLogin.AccessToken = field.NewString(tableName, "access_token")
	_oAuthLogin.RefreshToken = field.NewString(tableName, "refresh_token")
	_oAuthLogin.ExpiredAt = field.NewInt64(tableName, "expired_at")
	_oAuthLogin.Scopes = field.NewString(tableName, "scopes")

	_oAuthLogin.fillFieldMap()

	return _oAuthLogin
}

type oAuthLogin struct {
	oAuthLoginDo oAuthLoginDo

	ALL            field.Asterisk
	Id             field.Int64
	CreatedAt      field.Int64
	UpdatedAt      field.Int64
	Hide           field.Uint8
	PlatformName   field.String
	PlatformUserId field.Int64
	PrimaryEmail   field.String
	AccessToken    field.String
	RefreshToken   field.String
	ExpiredAt      field.Int64
	Scopes         field.String

	fieldMap map[string]field.Expr
}

func (o oAuthLogin) Table(newTableName string) *oAuthLogin {
	o.oAuthLoginDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oAuthLogin) As(alias string) *oAuthLogin {
	o.oAuthLoginDo.DO = *(o.oAuthLoginDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oAuthLogin) updateTableName(table string) *oAuthLogin {
	o.ALL = field.NewAsterisk(table)
	o.Id = field.NewInt64(table, "id")
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.UpdatedAt = field.NewInt64(table, "updated_at")
	o.Hide = field.NewUint8(table, "hide")
	o.PlatformName = field.NewString(table, "platform_name")
	o.PlatformUserId = field.NewInt64(table, "platform_user_id")
	o.PrimaryEmail = field.NewString(table, "primary_email")
	o.AccessToken = field.NewString(table, "access_token")
	o.RefreshToken = field.NewString(table, "refresh_token")
	o.ExpiredAt = field.NewInt64(table, "expired_at")
	o.Scopes = field.NewString(table, "scopes")

	o.fillFieldMap()

	return o
}

func (o *oAuthLogin) WithContext(ctx context.Context) IOAuthLoginDo {
	return o.oAuthLoginDo.WithContext(ctx)
}

func (o oAuthLogin) TableName() string { return o.oAuthLoginDo.TableName() }

func (o oAuthLogin) Alias() string { return o.oAuthLoginDo.Alias() }

func (o oAuthLogin) Columns(cols ...field.Expr) gen.Columns { return o.oAuthLoginDo.Columns(cols...) }

func (o *oAuthLogin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oAuthLogin) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["id"] = o.Id
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["hide"] = o.Hide
	o.fieldMap["platform_name"] = o.PlatformName
	o.fieldMap["platform_user_id"] = o.PlatformUserId
	o.fieldMap["primary_email"] = o.PrimaryEmail
	o.fieldMap["access_token"] = o.AccessToken
	o.fieldMap["refresh_token"] = o.RefreshToken
	o.fieldMap["expired_at"] = o.ExpiredAt
	o.fieldMap["scopes"] = o.Scopes
}

func (o oAuthLogin) clone(db *gorm.DB) oAuthLogin {
	o.oAuthLoginDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oAuthLogin) replaceDB(db *gorm.DB) oAuthLogin {
	o.oAuthLoginDo.ReplaceDB(db)
	return o
}

type oAuthLoginDo struct{ gen.DO }

type IOAuthLoginDo interface {
	gen.SubQuery
	Debug() IOAuthLoginDo
	WithContext(ctx context.Context) IOAuthLoginDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOAuthLoginDo
	WriteDB() IOAuthLoginDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOAuthLoginDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOAuthLoginDo
	Not(conds ...gen.Condition) IOAuthLoginDo
	Or(conds ...gen.Condition) IOAuthLoginDo
	Select(conds ...field.Expr) IOAuthLoginDo
	Where(conds ...gen.Condition) IOAuthLoginDo
	Order(conds ...field.Expr) IOAuthLoginDo
	Distinct(cols ...field.Expr) IOAuthLoginDo
	Omit(cols ...field.Expr) IOAuthLoginDo
	Join(table schema.Tabler, on ...field.Expr) IOAuthLoginDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOAuthLoginDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOAuthLoginDo
	Group(cols ...field.Expr) IOAuthLoginDo
	Having(conds ...gen.Condition) IOAuthLoginDo
	Limit(limit int) IOAuthLoginDo
	Offset(offset int) IOAuthLoginDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOAuthLoginDo
	Unscoped() IOAuthLoginDo
	Create(values ...*model.OAuthLogin) error
	CreateInBatches(values []*model.OAuthLogin, batchSize int) error
	Save(values ...*model.OAuthLogin) error
	First() (*model.OAuthLogin, error)
	Take() (*model.OAuthLogin, error)
	Last() (*model.OAuthLogin, error)
	Find() ([]*model.OAuthLogin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OAuthLogin, err error)
	FindInBatches(result *[]*model.OAuthLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OAuthLogin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOAuthLoginDo
	Assign(attrs ...field.AssignExpr) IOAuthLoginDo
	Joins(fields ...field.RelationField) IOAuthLoginDo
	Preload(fields ...field.RelationField) IOAuthLoginDo
	FirstOrInit() (*model.OAuthLogin, error)
	FirstOrCreate() (*model.OAuthLogin, error)
	FindByPage(offset int, limit int) (result []*model.OAuthLogin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOAuthLoginDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.OAuthLogin, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (o oAuthLoginDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.OAuthLogin, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM o_auth_logins ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(o.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(o.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(o.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(o.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(o.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(o.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (o oAuthLoginDo) Debug() IOAuthLoginDo {
	return o.withDO(o.DO.Debug())
}

func (o oAuthLoginDo) WithContext(ctx context.Context) IOAuthLoginDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oAuthLoginDo) ReadDB() IOAuthLoginDo {
	return o.Clauses(dbresolver.Read)
}

func (o oAuthLoginDo) WriteDB() IOAuthLoginDo {
	return o.Clauses(dbresolver.Write)
}

func (o oAuthLoginDo) Session(config *gorm.Session) IOAuthLoginDo {
	return o.withDO(o.DO.Session(config))
}

func (o oAuthLoginDo) Clauses(conds ...clause.Expression) IOAuthLoginDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oAuthLoginDo) Returning(value interface{}, columns ...string) IOAuthLoginDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oAuthLoginDo) Not(conds ...gen.Condition) IOAuthLoginDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oAuthLoginDo) Or(conds ...gen.Condition) IOAuthLoginDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oAuthLoginDo) Select(conds ...field.Expr) IOAuthLoginDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oAuthLoginDo) Where(conds ...gen.Condition) IOAuthLoginDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oAuthLoginDo) Order(conds ...field.Expr) IOAuthLoginDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oAuthLoginDo) Distinct(cols ...field.Expr) IOAuthLoginDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oAuthLoginDo) Omit(cols ...field.Expr) IOAuthLoginDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oAuthLoginDo) Join(table schema.Tabler, on ...field.Expr) IOAuthLoginDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oAuthLoginDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOAuthLoginDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oAuthLoginDo) RightJoin(table schema.Tabler, on ...field.Expr) IOAuthLoginDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oAuthLoginDo) Group(cols ...field.Expr) IOAuthLoginDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oAuthLoginDo) Having(conds ...gen.Condition) IOAuthLoginDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oAuthLoginDo) Limit(limit int) IOAuthLoginDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oAuthLoginDo) Offset(offset int) IOAuthLoginDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oAuthLoginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOAuthLoginDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oAuthLoginDo) Unscoped() IOAuthLoginDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oAuthLoginDo) Create(values ...*model.OAuthLogin) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oAuthLoginDo) CreateInBatches(values []*model.OAuthLogin, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oAuthLoginDo) Save(values ...*model.OAuthLogin) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oAuthLoginDo) First() (*model.OAuthLogin, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OAuthLogin), nil
	}
}

func (o oAuthLoginDo) Take() (*model.OAuthLogin, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OAuthLogin), nil
	}
}

func (o oAuthLoginDo) Last() (*model.OAuthLogin, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OAuthLogin), nil
	}
}

func (o oAuthLoginDo) Find() ([]*model.OAuthLogin, error) {
	result, err := o.DO.Find()
	return result.([]*model.OAuthLogin), err
}

func (o oAuthLoginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OAuthLogin, err error) {
	buf := make([]*model.OAuthLogin, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oAuthLoginDo) FindInBatches(result *[]*model.OAuthLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oAuthLoginDo) Attrs(attrs ...field.AssignExpr) IOAuthLoginDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oAuthLoginDo) Assign(attrs ...field.AssignExpr) IOAuthLoginDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oAuthLoginDo) Joins(fields ...field.RelationField) IOAuthLoginDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oAuthLoginDo) Preload(fields ...field.RelationField) IOAuthLoginDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oAuthLoginDo) FirstOrInit() (*model.OAuthLogin, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OAuthLogin), nil
	}
}

func (o oAuthLoginDo) FirstOrCreate() (*model.OAuthLogin, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OAuthLogin), nil
	}
}

func (o oAuthLoginDo) FindByPage(offset int, limit int) (result []*model.OAuthLogin, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oAuthLoginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oAuthLoginDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oAuthLoginDo) Delete(models ...*model.OAuthLogin) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oAuthLoginDo) withDO(do gen.Dao) *oAuthLoginDo {
	o.DO = *do.(*gen.DO)
	return o
}
