// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package biz

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newS3ObjectRecord(db *gorm.DB, opts ...gen.DOOption) s3ObjectRecord {
	_s3ObjectRecord := s3ObjectRecord{}

	_s3ObjectRecord.s3ObjectRecordDo.UseDB(db, opts...)
	_s3ObjectRecord.s3ObjectRecordDo.UseModel(&model.S3ObjectRecord{})

	tableName := _s3ObjectRecord.s3ObjectRecordDo.TableName()
	_s3ObjectRecord.ALL = field.NewAsterisk(tableName)
	_s3ObjectRecord.ID = field.NewInt64(tableName, "id")
	_s3ObjectRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_s3ObjectRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_s3ObjectRecord.Hide = field.NewInt(tableName, "hide")
	_s3ObjectRecord.ObjectKey = field.NewString(tableName, "object_key")
	_s3ObjectRecord.FileName = field.NewString(tableName, "file_name")
	_s3ObjectRecord.Extension = field.NewString(tableName, "extension")
	_s3ObjectRecord.FileSize = field.NewInt64(tableName, "file_size")
	_s3ObjectRecord.BucketName = field.NewString(tableName, "bucket_name")
	_s3ObjectRecord.ChecksumType = field.NewString(tableName, "checksum_type")
	_s3ObjectRecord.Checksum = field.NewString(tableName, "checksum")
	_s3ObjectRecord.PubAvailable = field.NewInt(tableName, "pub_available")

	_s3ObjectRecord.fillFieldMap()

	return _s3ObjectRecord
}

type s3ObjectRecord struct {
	s3ObjectRecordDo s3ObjectRecordDo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	Hide         field.Int
	ObjectKey    field.String
	FileName     field.String
	Extension    field.String
	FileSize     field.Int64
	BucketName   field.String
	ChecksumType field.String
	Checksum     field.String
	PubAvailable field.Int

	fieldMap map[string]field.Expr
}

func (s s3ObjectRecord) Table(newTableName string) *s3ObjectRecord {
	s.s3ObjectRecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s s3ObjectRecord) As(alias string) *s3ObjectRecord {
	s.s3ObjectRecordDo.DO = *(s.s3ObjectRecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *s3ObjectRecord) updateTableName(table string) *s3ObjectRecord {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.Hide = field.NewInt(table, "hide")
	s.ObjectKey = field.NewString(table, "object_key")
	s.FileName = field.NewString(table, "file_name")
	s.Extension = field.NewString(table, "extension")
	s.FileSize = field.NewInt64(table, "file_size")
	s.BucketName = field.NewString(table, "bucket_name")
	s.ChecksumType = field.NewString(table, "checksum_type")
	s.Checksum = field.NewString(table, "checksum")
	s.PubAvailable = field.NewInt(table, "pub_available")

	s.fillFieldMap()

	return s
}

func (s *s3ObjectRecord) WithContext(ctx context.Context) IS3ObjectRecordDo {
	return s.s3ObjectRecordDo.WithContext(ctx)
}

func (s s3ObjectRecord) TableName() string { return s.s3ObjectRecordDo.TableName() }

func (s s3ObjectRecord) Alias() string { return s.s3ObjectRecordDo.Alias() }

func (s s3ObjectRecord) Columns(cols ...field.Expr) gen.Columns {
	return s.s3ObjectRecordDo.Columns(cols...)
}

func (s *s3ObjectRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *s3ObjectRecord) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["hide"] = s.Hide
	s.fieldMap["object_key"] = s.ObjectKey
	s.fieldMap["file_name"] = s.FileName
	s.fieldMap["extension"] = s.Extension
	s.fieldMap["file_size"] = s.FileSize
	s.fieldMap["bucket_name"] = s.BucketName
	s.fieldMap["checksum_type"] = s.ChecksumType
	s.fieldMap["checksum"] = s.Checksum
	s.fieldMap["pub_available"] = s.PubAvailable
}

func (s s3ObjectRecord) clone(db *gorm.DB) s3ObjectRecord {
	s.s3ObjectRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s s3ObjectRecord) replaceDB(db *gorm.DB) s3ObjectRecord {
	s.s3ObjectRecordDo.ReplaceDB(db)
	return s
}

type s3ObjectRecordDo struct{ gen.DO }

type IS3ObjectRecordDo interface {
	gen.SubQuery
	Debug() IS3ObjectRecordDo
	WithContext(ctx context.Context) IS3ObjectRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IS3ObjectRecordDo
	WriteDB() IS3ObjectRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IS3ObjectRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IS3ObjectRecordDo
	Not(conds ...gen.Condition) IS3ObjectRecordDo
	Or(conds ...gen.Condition) IS3ObjectRecordDo
	Select(conds ...field.Expr) IS3ObjectRecordDo
	Where(conds ...gen.Condition) IS3ObjectRecordDo
	Order(conds ...field.Expr) IS3ObjectRecordDo
	Distinct(cols ...field.Expr) IS3ObjectRecordDo
	Omit(cols ...field.Expr) IS3ObjectRecordDo
	Join(table schema.Tabler, on ...field.Expr) IS3ObjectRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IS3ObjectRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IS3ObjectRecordDo
	Group(cols ...field.Expr) IS3ObjectRecordDo
	Having(conds ...gen.Condition) IS3ObjectRecordDo
	Limit(limit int) IS3ObjectRecordDo
	Offset(offset int) IS3ObjectRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IS3ObjectRecordDo
	Unscoped() IS3ObjectRecordDo
	Create(values ...*model.S3ObjectRecord) error
	CreateInBatches(values []*model.S3ObjectRecord, batchSize int) error
	Save(values ...*model.S3ObjectRecord) error
	First() (*model.S3ObjectRecord, error)
	Take() (*model.S3ObjectRecord, error)
	Last() (*model.S3ObjectRecord, error)
	Find() ([]*model.S3ObjectRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.S3ObjectRecord, err error)
	FindInBatches(result *[]*model.S3ObjectRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.S3ObjectRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IS3ObjectRecordDo
	Assign(attrs ...field.AssignExpr) IS3ObjectRecordDo
	Joins(fields ...field.RelationField) IS3ObjectRecordDo
	Preload(fields ...field.RelationField) IS3ObjectRecordDo
	FirstOrInit() (*model.S3ObjectRecord, error)
	FirstOrCreate() (*model.S3ObjectRecord, error)
	FindByPage(offset int, limit int) (result []*model.S3ObjectRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IS3ObjectRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.S3ObjectRecord, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (s s3ObjectRecordDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.S3ObjectRecord, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM s3_object_records ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(s.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(s.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(s.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(s.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(s.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(s.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s s3ObjectRecordDo) Debug() IS3ObjectRecordDo {
	return s.withDO(s.DO.Debug())
}

func (s s3ObjectRecordDo) WithContext(ctx context.Context) IS3ObjectRecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s s3ObjectRecordDo) ReadDB() IS3ObjectRecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s s3ObjectRecordDo) WriteDB() IS3ObjectRecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s s3ObjectRecordDo) Session(config *gorm.Session) IS3ObjectRecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s s3ObjectRecordDo) Clauses(conds ...clause.Expression) IS3ObjectRecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s s3ObjectRecordDo) Returning(value interface{}, columns ...string) IS3ObjectRecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s s3ObjectRecordDo) Not(conds ...gen.Condition) IS3ObjectRecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s s3ObjectRecordDo) Or(conds ...gen.Condition) IS3ObjectRecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s s3ObjectRecordDo) Select(conds ...field.Expr) IS3ObjectRecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s s3ObjectRecordDo) Where(conds ...gen.Condition) IS3ObjectRecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s s3ObjectRecordDo) Order(conds ...field.Expr) IS3ObjectRecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s s3ObjectRecordDo) Distinct(cols ...field.Expr) IS3ObjectRecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s s3ObjectRecordDo) Omit(cols ...field.Expr) IS3ObjectRecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s s3ObjectRecordDo) Join(table schema.Tabler, on ...field.Expr) IS3ObjectRecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s s3ObjectRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IS3ObjectRecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s s3ObjectRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IS3ObjectRecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s s3ObjectRecordDo) Group(cols ...field.Expr) IS3ObjectRecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s s3ObjectRecordDo) Having(conds ...gen.Condition) IS3ObjectRecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s s3ObjectRecordDo) Limit(limit int) IS3ObjectRecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s s3ObjectRecordDo) Offset(offset int) IS3ObjectRecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s s3ObjectRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IS3ObjectRecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s s3ObjectRecordDo) Unscoped() IS3ObjectRecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s s3ObjectRecordDo) Create(values ...*model.S3ObjectRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s s3ObjectRecordDo) CreateInBatches(values []*model.S3ObjectRecord, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s s3ObjectRecordDo) Save(values ...*model.S3ObjectRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s s3ObjectRecordDo) First() (*model.S3ObjectRecord, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.S3ObjectRecord), nil
	}
}

func (s s3ObjectRecordDo) Take() (*model.S3ObjectRecord, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.S3ObjectRecord), nil
	}
}

func (s s3ObjectRecordDo) Last() (*model.S3ObjectRecord, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.S3ObjectRecord), nil
	}
}

func (s s3ObjectRecordDo) Find() ([]*model.S3ObjectRecord, error) {
	result, err := s.DO.Find()
	return result.([]*model.S3ObjectRecord), err
}

func (s s3ObjectRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.S3ObjectRecord, err error) {
	buf := make([]*model.S3ObjectRecord, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s s3ObjectRecordDo) FindInBatches(result *[]*model.S3ObjectRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s s3ObjectRecordDo) Attrs(attrs ...field.AssignExpr) IS3ObjectRecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s s3ObjectRecordDo) Assign(attrs ...field.AssignExpr) IS3ObjectRecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s s3ObjectRecordDo) Joins(fields ...field.RelationField) IS3ObjectRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s s3ObjectRecordDo) Preload(fields ...field.RelationField) IS3ObjectRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s s3ObjectRecordDo) FirstOrInit() (*model.S3ObjectRecord, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.S3ObjectRecord), nil
	}
}

func (s s3ObjectRecordDo) FirstOrCreate() (*model.S3ObjectRecord, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.S3ObjectRecord), nil
	}
}

func (s s3ObjectRecordDo) FindByPage(offset int, limit int) (result []*model.S3ObjectRecord, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s s3ObjectRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s s3ObjectRecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s s3ObjectRecordDo) Delete(models ...*model.S3ObjectRecord) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *s3ObjectRecordDo) withDO(do gen.Dao) *s3ObjectRecordDo {
	s.DO = *do.(*gen.DO)
	return s
}
