// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package extra

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newLogRecord(db *gorm.DB, opts ...gen.DOOption) logRecord {
	_logRecord := logRecord{}

	_logRecord.logRecordDo.UseDB(db, opts...)
	_logRecord.logRecordDo.UseModel(&model.LogRecord{})

	tableName := _logRecord.logRecordDo.TableName()
	_logRecord.ALL = field.NewAsterisk(tableName)
	_logRecord.ID = field.NewInt64(tableName, "id")
	_logRecord.Category = field.NewString(tableName, "category")
	_logRecord.Content = field.NewString(tableName, "content")
	_logRecord.Source = field.NewString(tableName, "source")
	_logRecord.CreatedAt = field.NewInt64(tableName, "created_at")

	_logRecord.fillFieldMap()

	return _logRecord
}

type logRecord struct {
	logRecordDo logRecordDo

	ALL       field.Asterisk
	ID        field.Int64
	Category  field.String
	Content   field.String
	Source    field.String
	CreatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (l logRecord) Table(newTableName string) *logRecord {
	l.logRecordDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logRecord) As(alias string) *logRecord {
	l.logRecordDo.DO = *(l.logRecordDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logRecord) updateTableName(table string) *logRecord {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.Category = field.NewString(table, "category")
	l.Content = field.NewString(table, "content")
	l.Source = field.NewString(table, "source")
	l.CreatedAt = field.NewInt64(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *logRecord) WithContext(ctx context.Context) ILogRecordDo {
	return l.logRecordDo.WithContext(ctx)
}

func (l logRecord) TableName() string { return l.logRecordDo.TableName() }

func (l logRecord) Alias() string { return l.logRecordDo.Alias() }

func (l logRecord) Columns(cols ...field.Expr) gen.Columns { return l.logRecordDo.Columns(cols...) }

func (l *logRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logRecord) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 5)
	l.fieldMap["id"] = l.ID
	l.fieldMap["category"] = l.Category
	l.fieldMap["content"] = l.Content
	l.fieldMap["source"] = l.Source
	l.fieldMap["created_at"] = l.CreatedAt
}

func (l logRecord) clone(db *gorm.DB) logRecord {
	l.logRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logRecord) replaceDB(db *gorm.DB) logRecord {
	l.logRecordDo.ReplaceDB(db)
	return l
}

type logRecordDo struct{ gen.DO }

type ILogRecordDo interface {
	gen.SubQuery
	Debug() ILogRecordDo
	WithContext(ctx context.Context) ILogRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogRecordDo
	WriteDB() ILogRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogRecordDo
	Not(conds ...gen.Condition) ILogRecordDo
	Or(conds ...gen.Condition) ILogRecordDo
	Select(conds ...field.Expr) ILogRecordDo
	Where(conds ...gen.Condition) ILogRecordDo
	Order(conds ...field.Expr) ILogRecordDo
	Distinct(cols ...field.Expr) ILogRecordDo
	Omit(cols ...field.Expr) ILogRecordDo
	Join(table schema.Tabler, on ...field.Expr) ILogRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogRecordDo
	Group(cols ...field.Expr) ILogRecordDo
	Having(conds ...gen.Condition) ILogRecordDo
	Limit(limit int) ILogRecordDo
	Offset(offset int) ILogRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogRecordDo
	Unscoped() ILogRecordDo
	Create(values ...*model.LogRecord) error
	CreateInBatches(values []*model.LogRecord, batchSize int) error
	Save(values ...*model.LogRecord) error
	First() (*model.LogRecord, error)
	Take() (*model.LogRecord, error)
	Last() (*model.LogRecord, error)
	Find() ([]*model.LogRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogRecord, err error)
	FindInBatches(result *[]*model.LogRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogRecordDo
	Assign(attrs ...field.AssignExpr) ILogRecordDo
	Joins(fields ...field.RelationField) ILogRecordDo
	Preload(fields ...field.RelationField) ILogRecordDo
	FirstOrInit() (*model.LogRecord, error)
	FirstOrCreate() (*model.LogRecord, error)
	FindByPage(offset int, limit int) (result []*model.LogRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.LogRecord, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (l logRecordDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.LogRecord, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM log_records ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(l.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(l.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(l.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(l.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(l.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(l.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l logRecordDo) Debug() ILogRecordDo {
	return l.withDO(l.DO.Debug())
}

func (l logRecordDo) WithContext(ctx context.Context) ILogRecordDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logRecordDo) ReadDB() ILogRecordDo {
	return l.Clauses(dbresolver.Read)
}

func (l logRecordDo) WriteDB() ILogRecordDo {
	return l.Clauses(dbresolver.Write)
}

func (l logRecordDo) Session(config *gorm.Session) ILogRecordDo {
	return l.withDO(l.DO.Session(config))
}

func (l logRecordDo) Clauses(conds ...clause.Expression) ILogRecordDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logRecordDo) Returning(value interface{}, columns ...string) ILogRecordDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logRecordDo) Not(conds ...gen.Condition) ILogRecordDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logRecordDo) Or(conds ...gen.Condition) ILogRecordDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logRecordDo) Select(conds ...field.Expr) ILogRecordDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logRecordDo) Where(conds ...gen.Condition) ILogRecordDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logRecordDo) Order(conds ...field.Expr) ILogRecordDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logRecordDo) Distinct(cols ...field.Expr) ILogRecordDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logRecordDo) Omit(cols ...field.Expr) ILogRecordDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logRecordDo) Join(table schema.Tabler, on ...field.Expr) ILogRecordDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogRecordDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogRecordDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logRecordDo) Group(cols ...field.Expr) ILogRecordDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logRecordDo) Having(conds ...gen.Condition) ILogRecordDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logRecordDo) Limit(limit int) ILogRecordDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logRecordDo) Offset(offset int) ILogRecordDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogRecordDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logRecordDo) Unscoped() ILogRecordDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logRecordDo) Create(values ...*model.LogRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logRecordDo) CreateInBatches(values []*model.LogRecord, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logRecordDo) Save(values ...*model.LogRecord) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logRecordDo) First() (*model.LogRecord, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogRecord), nil
	}
}

func (l logRecordDo) Take() (*model.LogRecord, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogRecord), nil
	}
}

func (l logRecordDo) Last() (*model.LogRecord, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogRecord), nil
	}
}

func (l logRecordDo) Find() ([]*model.LogRecord, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogRecord), err
}

func (l logRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogRecord, err error) {
	buf := make([]*model.LogRecord, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logRecordDo) FindInBatches(result *[]*model.LogRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logRecordDo) Attrs(attrs ...field.AssignExpr) ILogRecordDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logRecordDo) Assign(attrs ...field.AssignExpr) ILogRecordDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logRecordDo) Joins(fields ...field.RelationField) ILogRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logRecordDo) Preload(fields ...field.RelationField) ILogRecordDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logRecordDo) FirstOrInit() (*model.LogRecord, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogRecord), nil
	}
}

func (l logRecordDo) FirstOrCreate() (*model.LogRecord, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogRecord), nil
	}
}

func (l logRecordDo) FindByPage(offset int, limit int) (result []*model.LogRecord, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logRecordDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logRecordDo) Delete(models ...*model.LogRecord) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logRecordDo) withDO(do gen.Dao) *logRecordDo {
	l.DO = *do.(*gen.DO)
	return l
}
