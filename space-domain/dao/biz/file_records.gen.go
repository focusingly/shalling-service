// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package biz

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newFileRecord(db *gorm.DB, opts ...gen.DOOption) fileRecord {
	_fileRecord := fileRecord{}

	_fileRecord.fileRecordDo.UseDB(db, opts...)
	_fileRecord.fileRecordDo.UseModel(&model.FileRecord{})

	tableName := _fileRecord.fileRecordDo.TableName()
	_fileRecord.ALL = field.NewAsterisk(tableName)
	_fileRecord.ID = field.NewInt64(tableName, "id")
	_fileRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_fileRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_fileRecord.Hide = field.NewInt(tableName, "hide")
	_fileRecord.FileName = field.NewString(tableName, "file_name")
	_fileRecord.LocalLocation = field.NewString(tableName, "local_location")
	_fileRecord.Extension = field.NewString(tableName, "extension")
	_fileRecord.FileSize = field.NewInt64(tableName, "file_size")
	_fileRecord.Category = field.NewString(tableName, "category")
	_fileRecord.ChecksumType = field.NewString(tableName, "checksum_type")
	_fileRecord.Checksum = field.NewString(tableName, "checksum")
	_fileRecord.PubAvailable = field.NewInt(tableName, "pub_available")

	_fileRecord.fillFieldMap()

	return _fileRecord
}

type fileRecord struct {
	fileRecordDo fileRecordDo

	ALL           field.Asterisk
	ID            field.Int64
	CreatedAt     field.Int64
	UpdatedAt     field.Int64
	Hide          field.Int
	FileName      field.String
	LocalLocation field.String
	Extension     field.String
	FileSize      field.Int64
	Category      field.String
	ChecksumType  field.String
	Checksum      field.String
	PubAvailable  field.Int

	fieldMap map[string]field.Expr
}

func (f fileRecord) Table(newTableName string) *fileRecord {
	f.fileRecordDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileRecord) As(alias string) *fileRecord {
	f.fileRecordDo.DO = *(f.fileRecordDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileRecord) updateTableName(table string) *fileRecord {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.Hide = field.NewInt(table, "hide")
	f.FileName = field.NewString(table, "file_name")
	f.LocalLocation = field.NewString(table, "local_location")
	f.Extension = field.NewString(table, "extension")
	f.FileSize = field.NewInt64(table, "file_size")
	f.Category = field.NewString(table, "category")
	f.ChecksumType = field.NewString(table, "checksum_type")
	f.Checksum = field.NewString(table, "checksum")
	f.PubAvailable = field.NewInt(table, "pub_available")

	f.fillFieldMap()

	return f
}

func (f *fileRecord) WithContext(ctx context.Context) IFileRecordDo {
	return f.fileRecordDo.WithContext(ctx)
}

func (f fileRecord) TableName() string { return f.fileRecordDo.TableName() }

func (f fileRecord) Alias() string { return f.fileRecordDo.Alias() }

func (f fileRecord) Columns(cols ...field.Expr) gen.Columns { return f.fileRecordDo.Columns(cols...) }

func (f *fileRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileRecord) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 12)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["hide"] = f.Hide
	f.fieldMap["file_name"] = f.FileName
	f.fieldMap["local_location"] = f.LocalLocation
	f.fieldMap["extension"] = f.Extension
	f.fieldMap["file_size"] = f.FileSize
	f.fieldMap["category"] = f.Category
	f.fieldMap["checksum_type"] = f.ChecksumType
	f.fieldMap["checksum"] = f.Checksum
	f.fieldMap["pub_available"] = f.PubAvailable
}

func (f fileRecord) clone(db *gorm.DB) fileRecord {
	f.fileRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileRecord) replaceDB(db *gorm.DB) fileRecord {
	f.fileRecordDo.ReplaceDB(db)
	return f
}

type fileRecordDo struct{ gen.DO }

type IFileRecordDo interface {
	gen.SubQuery
	Debug() IFileRecordDo
	WithContext(ctx context.Context) IFileRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileRecordDo
	WriteDB() IFileRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileRecordDo
	Not(conds ...gen.Condition) IFileRecordDo
	Or(conds ...gen.Condition) IFileRecordDo
	Select(conds ...field.Expr) IFileRecordDo
	Where(conds ...gen.Condition) IFileRecordDo
	Order(conds ...field.Expr) IFileRecordDo
	Distinct(cols ...field.Expr) IFileRecordDo
	Omit(cols ...field.Expr) IFileRecordDo
	Join(table schema.Tabler, on ...field.Expr) IFileRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileRecordDo
	Group(cols ...field.Expr) IFileRecordDo
	Having(conds ...gen.Condition) IFileRecordDo
	Limit(limit int) IFileRecordDo
	Offset(offset int) IFileRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileRecordDo
	Unscoped() IFileRecordDo
	Create(values ...*model.FileRecord) error
	CreateInBatches(values []*model.FileRecord, batchSize int) error
	Save(values ...*model.FileRecord) error
	First() (*model.FileRecord, error)
	Take() (*model.FileRecord, error)
	Last() (*model.FileRecord, error)
	Find() ([]*model.FileRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileRecord, err error)
	FindInBatches(result *[]*model.FileRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileRecordDo
	Assign(attrs ...field.AssignExpr) IFileRecordDo
	Joins(fields ...field.RelationField) IFileRecordDo
	Preload(fields ...field.RelationField) IFileRecordDo
	FirstOrInit() (*model.FileRecord, error)
	FirstOrCreate() (*model.FileRecord, error)
	FindByPage(offset int, limit int) (result []*model.FileRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.FileRecord, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (f fileRecordDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.FileRecord, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM file_records ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(f.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(f.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(f.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(f.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(f.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(f.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (f fileRecordDo) Debug() IFileRecordDo {
	return f.withDO(f.DO.Debug())
}

func (f fileRecordDo) WithContext(ctx context.Context) IFileRecordDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileRecordDo) ReadDB() IFileRecordDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileRecordDo) WriteDB() IFileRecordDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileRecordDo) Session(config *gorm.Session) IFileRecordDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileRecordDo) Clauses(conds ...clause.Expression) IFileRecordDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileRecordDo) Returning(value interface{}, columns ...string) IFileRecordDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileRecordDo) Not(conds ...gen.Condition) IFileRecordDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileRecordDo) Or(conds ...gen.Condition) IFileRecordDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileRecordDo) Select(conds ...field.Expr) IFileRecordDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileRecordDo) Where(conds ...gen.Condition) IFileRecordDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileRecordDo) Order(conds ...field.Expr) IFileRecordDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileRecordDo) Distinct(cols ...field.Expr) IFileRecordDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileRecordDo) Omit(cols ...field.Expr) IFileRecordDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileRecordDo) Join(table schema.Tabler, on ...field.Expr) IFileRecordDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileRecordDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileRecordDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileRecordDo) Group(cols ...field.Expr) IFileRecordDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileRecordDo) Having(conds ...gen.Condition) IFileRecordDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileRecordDo) Limit(limit int) IFileRecordDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileRecordDo) Offset(offset int) IFileRecordDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileRecordDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileRecordDo) Unscoped() IFileRecordDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileRecordDo) Create(values ...*model.FileRecord) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileRecordDo) CreateInBatches(values []*model.FileRecord, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileRecordDo) Save(values ...*model.FileRecord) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileRecordDo) First() (*model.FileRecord, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileRecord), nil
	}
}

func (f fileRecordDo) Take() (*model.FileRecord, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileRecord), nil
	}
}

func (f fileRecordDo) Last() (*model.FileRecord, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileRecord), nil
	}
}

func (f fileRecordDo) Find() ([]*model.FileRecord, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileRecord), err
}

func (f fileRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileRecord, err error) {
	buf := make([]*model.FileRecord, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileRecordDo) FindInBatches(result *[]*model.FileRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileRecordDo) Attrs(attrs ...field.AssignExpr) IFileRecordDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileRecordDo) Assign(attrs ...field.AssignExpr) IFileRecordDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileRecordDo) Joins(fields ...field.RelationField) IFileRecordDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileRecordDo) Preload(fields ...field.RelationField) IFileRecordDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileRecordDo) FirstOrInit() (*model.FileRecord, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileRecord), nil
	}
}

func (f fileRecordDo) FirstOrCreate() (*model.FileRecord, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileRecord), nil
	}
}

func (f fileRecordDo) FindByPage(offset int, limit int) (result []*model.FileRecord, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileRecordDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileRecordDo) Delete(models ...*model.FileRecord) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileRecordDo) withDO(do gen.Dao) *fileRecordDo {
	f.DO = *do.(*gen.DO)
	return f
}
