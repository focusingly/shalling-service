// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package extra

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newLogInfo(db *gorm.DB, opts ...gen.DOOption) logInfo {
	_logInfo := logInfo{}

	_logInfo.logInfoDo.UseDB(db, opts...)
	_logInfo.logInfoDo.UseModel(&model.LogInfo{})

	tableName := _logInfo.logInfoDo.TableName()
	_logInfo.ALL = field.NewAsterisk(tableName)
	_logInfo.ID = field.NewInt64(tableName, "id")
	_logInfo.LogType = field.NewString(tableName, "log_type")
	_logInfo.Message = field.NewString(tableName, "message")
	_logInfo.Level = field.NewString(tableName, "level")
	_logInfo.CostTime = field.NewInt64(tableName, "cost_time")
	_logInfo.RequestMethod = field.NewString(tableName, "request_method")
	_logInfo.RequestURI = field.NewString(tableName, "request_uri")
	_logInfo.StackTrace = field.NewString(tableName, "stack_trace")
	_logInfo.IPAddr = field.NewString(tableName, "ip_addr")
	_logInfo.IPSource = field.NewString(tableName, "ip_source")
	_logInfo.Useragent = field.NewString(tableName, "useragent")
	_logInfo.CreatedAt = field.NewInt64(tableName, "created_at")

	_logInfo.fillFieldMap()

	return _logInfo
}

type logInfo struct {
	logInfoDo logInfoDo

	ALL           field.Asterisk
	ID            field.Int64
	LogType       field.String
	Message       field.String
	Level         field.String
	CostTime      field.Int64
	RequestMethod field.String
	RequestURI    field.String
	StackTrace    field.String
	IPAddr        field.String
	IPSource      field.String
	Useragent     field.String
	CreatedAt     field.Int64

	fieldMap map[string]field.Expr
}

func (l logInfo) Table(newTableName string) *logInfo {
	l.logInfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logInfo) As(alias string) *logInfo {
	l.logInfoDo.DO = *(l.logInfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logInfo) updateTableName(table string) *logInfo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.LogType = field.NewString(table, "log_type")
	l.Message = field.NewString(table, "message")
	l.Level = field.NewString(table, "level")
	l.CostTime = field.NewInt64(table, "cost_time")
	l.RequestMethod = field.NewString(table, "request_method")
	l.RequestURI = field.NewString(table, "request_uri")
	l.StackTrace = field.NewString(table, "stack_trace")
	l.IPAddr = field.NewString(table, "ip_addr")
	l.IPSource = field.NewString(table, "ip_source")
	l.Useragent = field.NewString(table, "useragent")
	l.CreatedAt = field.NewInt64(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *logInfo) WithContext(ctx context.Context) ILogInfoDo { return l.logInfoDo.WithContext(ctx) }

func (l logInfo) TableName() string { return l.logInfoDo.TableName() }

func (l logInfo) Alias() string { return l.logInfoDo.Alias() }

func (l logInfo) Columns(cols ...field.Expr) gen.Columns { return l.logInfoDo.Columns(cols...) }

func (l *logInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logInfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["id"] = l.ID
	l.fieldMap["log_type"] = l.LogType
	l.fieldMap["message"] = l.Message
	l.fieldMap["level"] = l.Level
	l.fieldMap["cost_time"] = l.CostTime
	l.fieldMap["request_method"] = l.RequestMethod
	l.fieldMap["request_uri"] = l.RequestURI
	l.fieldMap["stack_trace"] = l.StackTrace
	l.fieldMap["ip_addr"] = l.IPAddr
	l.fieldMap["ip_source"] = l.IPSource
	l.fieldMap["useragent"] = l.Useragent
	l.fieldMap["created_at"] = l.CreatedAt
}

func (l logInfo) clone(db *gorm.DB) logInfo {
	l.logInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logInfo) replaceDB(db *gorm.DB) logInfo {
	l.logInfoDo.ReplaceDB(db)
	return l
}

type logInfoDo struct{ gen.DO }

type ILogInfoDo interface {
	gen.SubQuery
	Debug() ILogInfoDo
	WithContext(ctx context.Context) ILogInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogInfoDo
	WriteDB() ILogInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogInfoDo
	Not(conds ...gen.Condition) ILogInfoDo
	Or(conds ...gen.Condition) ILogInfoDo
	Select(conds ...field.Expr) ILogInfoDo
	Where(conds ...gen.Condition) ILogInfoDo
	Order(conds ...field.Expr) ILogInfoDo
	Distinct(cols ...field.Expr) ILogInfoDo
	Omit(cols ...field.Expr) ILogInfoDo
	Join(table schema.Tabler, on ...field.Expr) ILogInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogInfoDo
	Group(cols ...field.Expr) ILogInfoDo
	Having(conds ...gen.Condition) ILogInfoDo
	Limit(limit int) ILogInfoDo
	Offset(offset int) ILogInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogInfoDo
	Unscoped() ILogInfoDo
	Create(values ...*model.LogInfo) error
	CreateInBatches(values []*model.LogInfo, batchSize int) error
	Save(values ...*model.LogInfo) error
	First() (*model.LogInfo, error)
	Take() (*model.LogInfo, error)
	Last() (*model.LogInfo, error)
	Find() ([]*model.LogInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogInfo, err error)
	FindInBatches(result *[]*model.LogInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogInfoDo
	Assign(attrs ...field.AssignExpr) ILogInfoDo
	Joins(fields ...field.RelationField) ILogInfoDo
	Preload(fields ...field.RelationField) ILogInfoDo
	FirstOrInit() (*model.LogInfo, error)
	FirstOrCreate() (*model.LogInfo, error)
	FindByPage(offset int, limit int) (result []*model.LogInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.LogInfo, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (l logInfoDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.LogInfo, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM log_infos ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(l.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(l.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(l.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(l.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(l.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(l.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l logInfoDo) Debug() ILogInfoDo {
	return l.withDO(l.DO.Debug())
}

func (l logInfoDo) WithContext(ctx context.Context) ILogInfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logInfoDo) ReadDB() ILogInfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l logInfoDo) WriteDB() ILogInfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l logInfoDo) Session(config *gorm.Session) ILogInfoDo {
	return l.withDO(l.DO.Session(config))
}

func (l logInfoDo) Clauses(conds ...clause.Expression) ILogInfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logInfoDo) Returning(value interface{}, columns ...string) ILogInfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logInfoDo) Not(conds ...gen.Condition) ILogInfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logInfoDo) Or(conds ...gen.Condition) ILogInfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logInfoDo) Select(conds ...field.Expr) ILogInfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logInfoDo) Where(conds ...gen.Condition) ILogInfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logInfoDo) Order(conds ...field.Expr) ILogInfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logInfoDo) Distinct(cols ...field.Expr) ILogInfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logInfoDo) Omit(cols ...field.Expr) ILogInfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logInfoDo) Join(table schema.Tabler, on ...field.Expr) ILogInfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogInfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogInfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logInfoDo) Group(cols ...field.Expr) ILogInfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logInfoDo) Having(conds ...gen.Condition) ILogInfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logInfoDo) Limit(limit int) ILogInfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logInfoDo) Offset(offset int) ILogInfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogInfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logInfoDo) Unscoped() ILogInfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logInfoDo) Create(values ...*model.LogInfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logInfoDo) CreateInBatches(values []*model.LogInfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logInfoDo) Save(values ...*model.LogInfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logInfoDo) First() (*model.LogInfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogInfo), nil
	}
}

func (l logInfoDo) Take() (*model.LogInfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogInfo), nil
	}
}

func (l logInfoDo) Last() (*model.LogInfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogInfo), nil
	}
}

func (l logInfoDo) Find() ([]*model.LogInfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogInfo), err
}

func (l logInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogInfo, err error) {
	buf := make([]*model.LogInfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logInfoDo) FindInBatches(result *[]*model.LogInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logInfoDo) Attrs(attrs ...field.AssignExpr) ILogInfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logInfoDo) Assign(attrs ...field.AssignExpr) ILogInfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logInfoDo) Joins(fields ...field.RelationField) ILogInfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logInfoDo) Preload(fields ...field.RelationField) ILogInfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logInfoDo) FirstOrInit() (*model.LogInfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogInfo), nil
	}
}

func (l logInfoDo) FirstOrCreate() (*model.LogInfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogInfo), nil
	}
}

func (l logInfoDo) FindByPage(offset int, limit int) (result []*model.LogInfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logInfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logInfoDo) Delete(models ...*model.LogInfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logInfoDo) withDO(do gen.Dao) *logInfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
