// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package biz

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newFriendLink(db *gorm.DB, opts ...gen.DOOption) friendLink {
	_friendLink := friendLink{}

	_friendLink.friendLinkDo.UseDB(db, opts...)
	_friendLink.friendLinkDo.UseModel(&model.FriendLink{})

	tableName := _friendLink.friendLinkDo.TableName()
	_friendLink.ALL = field.NewAsterisk(tableName)
	_friendLink.ID = field.NewInt64(tableName, "id")
	_friendLink.CreatedAt = field.NewInt64(tableName, "created_at")
	_friendLink.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_friendLink.Hide = field.NewInt(tableName, "hide")
	_friendLink.SiteURL = field.NewString(tableName, "site_url")
	_friendLink.Owner = field.NewString(tableName, "owner")
	_friendLink.ShortName = field.NewString(tableName, "short_name")
	_friendLink.Available = field.NewInt(tableName, "available")
	_friendLink.LogoURL = field.NewString(tableName, "logo_url")
	_friendLink.Description = field.NewString(tableName, "description")
	_friendLink.BgURL = field.NewString(tableName, "bg_url")

	_friendLink.fillFieldMap()

	return _friendLink
}

type friendLink struct {
	friendLinkDo friendLinkDo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Int64
	UpdatedAt   field.Int64
	Hide        field.Int
	SiteURL     field.String
	Owner       field.String
	ShortName   field.String
	Available   field.Int
	LogoURL     field.String
	Description field.String
	BgURL       field.String

	fieldMap map[string]field.Expr
}

func (f friendLink) Table(newTableName string) *friendLink {
	f.friendLinkDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f friendLink) As(alias string) *friendLink {
	f.friendLinkDo.DO = *(f.friendLinkDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *friendLink) updateTableName(table string) *friendLink {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.CreatedAt = field.NewInt64(table, "created_at")
	f.UpdatedAt = field.NewInt64(table, "updated_at")
	f.Hide = field.NewInt(table, "hide")
	f.SiteURL = field.NewString(table, "site_url")
	f.Owner = field.NewString(table, "owner")
	f.ShortName = field.NewString(table, "short_name")
	f.Available = field.NewInt(table, "available")
	f.LogoURL = field.NewString(table, "logo_url")
	f.Description = field.NewString(table, "description")
	f.BgURL = field.NewString(table, "bg_url")

	f.fillFieldMap()

	return f
}

func (f *friendLink) WithContext(ctx context.Context) IFriendLinkDo {
	return f.friendLinkDo.WithContext(ctx)
}

func (f friendLink) TableName() string { return f.friendLinkDo.TableName() }

func (f friendLink) Alias() string { return f.friendLinkDo.Alias() }

func (f friendLink) Columns(cols ...field.Expr) gen.Columns { return f.friendLinkDo.Columns(cols...) }

func (f *friendLink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *friendLink) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["hide"] = f.Hide
	f.fieldMap["site_url"] = f.SiteURL
	f.fieldMap["owner"] = f.Owner
	f.fieldMap["short_name"] = f.ShortName
	f.fieldMap["available"] = f.Available
	f.fieldMap["logo_url"] = f.LogoURL
	f.fieldMap["description"] = f.Description
	f.fieldMap["bg_url"] = f.BgURL
}

func (f friendLink) clone(db *gorm.DB) friendLink {
	f.friendLinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f friendLink) replaceDB(db *gorm.DB) friendLink {
	f.friendLinkDo.ReplaceDB(db)
	return f
}

type friendLinkDo struct{ gen.DO }

type IFriendLinkDo interface {
	gen.SubQuery
	Debug() IFriendLinkDo
	WithContext(ctx context.Context) IFriendLinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFriendLinkDo
	WriteDB() IFriendLinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFriendLinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFriendLinkDo
	Not(conds ...gen.Condition) IFriendLinkDo
	Or(conds ...gen.Condition) IFriendLinkDo
	Select(conds ...field.Expr) IFriendLinkDo
	Where(conds ...gen.Condition) IFriendLinkDo
	Order(conds ...field.Expr) IFriendLinkDo
	Distinct(cols ...field.Expr) IFriendLinkDo
	Omit(cols ...field.Expr) IFriendLinkDo
	Join(table schema.Tabler, on ...field.Expr) IFriendLinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFriendLinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFriendLinkDo
	Group(cols ...field.Expr) IFriendLinkDo
	Having(conds ...gen.Condition) IFriendLinkDo
	Limit(limit int) IFriendLinkDo
	Offset(offset int) IFriendLinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFriendLinkDo
	Unscoped() IFriendLinkDo
	Create(values ...*model.FriendLink) error
	CreateInBatches(values []*model.FriendLink, batchSize int) error
	Save(values ...*model.FriendLink) error
	First() (*model.FriendLink, error)
	Take() (*model.FriendLink, error)
	Last() (*model.FriendLink, error)
	Find() ([]*model.FriendLink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FriendLink, err error)
	FindInBatches(result *[]*model.FriendLink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FriendLink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFriendLinkDo
	Assign(attrs ...field.AssignExpr) IFriendLinkDo
	Joins(fields ...field.RelationField) IFriendLinkDo
	Preload(fields ...field.RelationField) IFriendLinkDo
	FirstOrInit() (*model.FriendLink, error)
	FirstOrCreate() (*model.FriendLink, error)
	FindByPage(offset int, limit int) (result []*model.FriendLink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFriendLinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.FriendLink, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (f friendLinkDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.FriendLink, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM friend_links ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(f.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(f.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(f.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(f.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(f.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(f.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (f friendLinkDo) Debug() IFriendLinkDo {
	return f.withDO(f.DO.Debug())
}

func (f friendLinkDo) WithContext(ctx context.Context) IFriendLinkDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f friendLinkDo) ReadDB() IFriendLinkDo {
	return f.Clauses(dbresolver.Read)
}

func (f friendLinkDo) WriteDB() IFriendLinkDo {
	return f.Clauses(dbresolver.Write)
}

func (f friendLinkDo) Session(config *gorm.Session) IFriendLinkDo {
	return f.withDO(f.DO.Session(config))
}

func (f friendLinkDo) Clauses(conds ...clause.Expression) IFriendLinkDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f friendLinkDo) Returning(value interface{}, columns ...string) IFriendLinkDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f friendLinkDo) Not(conds ...gen.Condition) IFriendLinkDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f friendLinkDo) Or(conds ...gen.Condition) IFriendLinkDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f friendLinkDo) Select(conds ...field.Expr) IFriendLinkDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f friendLinkDo) Where(conds ...gen.Condition) IFriendLinkDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f friendLinkDo) Order(conds ...field.Expr) IFriendLinkDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f friendLinkDo) Distinct(cols ...field.Expr) IFriendLinkDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f friendLinkDo) Omit(cols ...field.Expr) IFriendLinkDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f friendLinkDo) Join(table schema.Tabler, on ...field.Expr) IFriendLinkDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f friendLinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFriendLinkDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f friendLinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IFriendLinkDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f friendLinkDo) Group(cols ...field.Expr) IFriendLinkDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f friendLinkDo) Having(conds ...gen.Condition) IFriendLinkDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f friendLinkDo) Limit(limit int) IFriendLinkDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f friendLinkDo) Offset(offset int) IFriendLinkDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f friendLinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFriendLinkDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f friendLinkDo) Unscoped() IFriendLinkDo {
	return f.withDO(f.DO.Unscoped())
}

func (f friendLinkDo) Create(values ...*model.FriendLink) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f friendLinkDo) CreateInBatches(values []*model.FriendLink, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f friendLinkDo) Save(values ...*model.FriendLink) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f friendLinkDo) First() (*model.FriendLink, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendLink), nil
	}
}

func (f friendLinkDo) Take() (*model.FriendLink, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendLink), nil
	}
}

func (f friendLinkDo) Last() (*model.FriendLink, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendLink), nil
	}
}

func (f friendLinkDo) Find() ([]*model.FriendLink, error) {
	result, err := f.DO.Find()
	return result.([]*model.FriendLink), err
}

func (f friendLinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FriendLink, err error) {
	buf := make([]*model.FriendLink, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f friendLinkDo) FindInBatches(result *[]*model.FriendLink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f friendLinkDo) Attrs(attrs ...field.AssignExpr) IFriendLinkDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f friendLinkDo) Assign(attrs ...field.AssignExpr) IFriendLinkDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f friendLinkDo) Joins(fields ...field.RelationField) IFriendLinkDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f friendLinkDo) Preload(fields ...field.RelationField) IFriendLinkDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f friendLinkDo) FirstOrInit() (*model.FriendLink, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendLink), nil
	}
}

func (f friendLinkDo) FirstOrCreate() (*model.FriendLink, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FriendLink), nil
	}
}

func (f friendLinkDo) FindByPage(offset int, limit int) (result []*model.FriendLink, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f friendLinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f friendLinkDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f friendLinkDo) Delete(models ...*model.FriendLink) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *friendLinkDo) withDO(do gen.Dao) *friendLinkDo {
	f.DO = *do.(*gen.DO)
	return f
}
