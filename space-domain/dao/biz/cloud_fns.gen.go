// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package biz

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newCloudFn(db *gorm.DB, opts ...gen.DOOption) cloudFn {
	_cloudFn := cloudFn{}

	_cloudFn.cloudFnDo.UseDB(db, opts...)
	_cloudFn.cloudFnDo.UseModel(&model.CloudFn{})

	tableName := _cloudFn.cloudFnDo.TableName()
	_cloudFn.ALL = field.NewAsterisk(tableName)
	_cloudFn.ID = field.NewInt64(tableName, "id")
	_cloudFn.CreatedAt = field.NewInt64(tableName, "created_at")
	_cloudFn.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_cloudFn.Hide = field.NewInt(tableName, "hide")
	_cloudFn.FuncName = field.NewString(tableName, "func_name")
	_cloudFn.Code = field.NewString(tableName, "code")
	_cloudFn.Lang = field.NewString(tableName, "lang")
	_cloudFn.Enable = field.NewInt(tableName, "enable")

	_cloudFn.fillFieldMap()

	return _cloudFn
}

type cloudFn struct {
	cloudFnDo cloudFnDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Int64
	UpdatedAt field.Int64
	Hide      field.Int
	FuncName  field.String
	Code      field.String
	Lang      field.String
	Enable    field.Int

	fieldMap map[string]field.Expr
}

func (c cloudFn) Table(newTableName string) *cloudFn {
	c.cloudFnDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cloudFn) As(alias string) *cloudFn {
	c.cloudFnDo.DO = *(c.cloudFnDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cloudFn) updateTableName(table string) *cloudFn {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")
	c.Hide = field.NewInt(table, "hide")
	c.FuncName = field.NewString(table, "func_name")
	c.Code = field.NewString(table, "code")
	c.Lang = field.NewString(table, "lang")
	c.Enable = field.NewInt(table, "enable")

	c.fillFieldMap()

	return c
}

func (c *cloudFn) WithContext(ctx context.Context) ICloudFnDo { return c.cloudFnDo.WithContext(ctx) }

func (c cloudFn) TableName() string { return c.cloudFnDo.TableName() }

func (c cloudFn) Alias() string { return c.cloudFnDo.Alias() }

func (c cloudFn) Columns(cols ...field.Expr) gen.Columns { return c.cloudFnDo.Columns(cols...) }

func (c *cloudFn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cloudFn) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["hide"] = c.Hide
	c.fieldMap["func_name"] = c.FuncName
	c.fieldMap["code"] = c.Code
	c.fieldMap["lang"] = c.Lang
	c.fieldMap["enable"] = c.Enable
}

func (c cloudFn) clone(db *gorm.DB) cloudFn {
	c.cloudFnDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cloudFn) replaceDB(db *gorm.DB) cloudFn {
	c.cloudFnDo.ReplaceDB(db)
	return c
}

type cloudFnDo struct{ gen.DO }

type ICloudFnDo interface {
	gen.SubQuery
	Debug() ICloudFnDo
	WithContext(ctx context.Context) ICloudFnDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICloudFnDo
	WriteDB() ICloudFnDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICloudFnDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICloudFnDo
	Not(conds ...gen.Condition) ICloudFnDo
	Or(conds ...gen.Condition) ICloudFnDo
	Select(conds ...field.Expr) ICloudFnDo
	Where(conds ...gen.Condition) ICloudFnDo
	Order(conds ...field.Expr) ICloudFnDo
	Distinct(cols ...field.Expr) ICloudFnDo
	Omit(cols ...field.Expr) ICloudFnDo
	Join(table schema.Tabler, on ...field.Expr) ICloudFnDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICloudFnDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICloudFnDo
	Group(cols ...field.Expr) ICloudFnDo
	Having(conds ...gen.Condition) ICloudFnDo
	Limit(limit int) ICloudFnDo
	Offset(offset int) ICloudFnDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICloudFnDo
	Unscoped() ICloudFnDo
	Create(values ...*model.CloudFn) error
	CreateInBatches(values []*model.CloudFn, batchSize int) error
	Save(values ...*model.CloudFn) error
	First() (*model.CloudFn, error)
	Take() (*model.CloudFn, error)
	Last() (*model.CloudFn, error)
	Find() ([]*model.CloudFn, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CloudFn, err error)
	FindInBatches(result *[]*model.CloudFn, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CloudFn) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICloudFnDo
	Assign(attrs ...field.AssignExpr) ICloudFnDo
	Joins(fields ...field.RelationField) ICloudFnDo
	Preload(fields ...field.RelationField) ICloudFnDo
	FirstOrInit() (*model.CloudFn, error)
	FirstOrCreate() (*model.CloudFn, error)
	FindByPage(offset int, limit int) (result []*model.CloudFn, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICloudFnDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.CloudFn, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (c cloudFnDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.CloudFn, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM cloud_fns ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(c.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(c.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(c.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(c.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(c.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(c.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c cloudFnDo) Debug() ICloudFnDo {
	return c.withDO(c.DO.Debug())
}

func (c cloudFnDo) WithContext(ctx context.Context) ICloudFnDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cloudFnDo) ReadDB() ICloudFnDo {
	return c.Clauses(dbresolver.Read)
}

func (c cloudFnDo) WriteDB() ICloudFnDo {
	return c.Clauses(dbresolver.Write)
}

func (c cloudFnDo) Session(config *gorm.Session) ICloudFnDo {
	return c.withDO(c.DO.Session(config))
}

func (c cloudFnDo) Clauses(conds ...clause.Expression) ICloudFnDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cloudFnDo) Returning(value interface{}, columns ...string) ICloudFnDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cloudFnDo) Not(conds ...gen.Condition) ICloudFnDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cloudFnDo) Or(conds ...gen.Condition) ICloudFnDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cloudFnDo) Select(conds ...field.Expr) ICloudFnDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cloudFnDo) Where(conds ...gen.Condition) ICloudFnDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cloudFnDo) Order(conds ...field.Expr) ICloudFnDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cloudFnDo) Distinct(cols ...field.Expr) ICloudFnDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cloudFnDo) Omit(cols ...field.Expr) ICloudFnDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cloudFnDo) Join(table schema.Tabler, on ...field.Expr) ICloudFnDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cloudFnDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICloudFnDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cloudFnDo) RightJoin(table schema.Tabler, on ...field.Expr) ICloudFnDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cloudFnDo) Group(cols ...field.Expr) ICloudFnDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cloudFnDo) Having(conds ...gen.Condition) ICloudFnDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cloudFnDo) Limit(limit int) ICloudFnDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cloudFnDo) Offset(offset int) ICloudFnDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cloudFnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICloudFnDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cloudFnDo) Unscoped() ICloudFnDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cloudFnDo) Create(values ...*model.CloudFn) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cloudFnDo) CreateInBatches(values []*model.CloudFn, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cloudFnDo) Save(values ...*model.CloudFn) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cloudFnDo) First() (*model.CloudFn, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudFn), nil
	}
}

func (c cloudFnDo) Take() (*model.CloudFn, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudFn), nil
	}
}

func (c cloudFnDo) Last() (*model.CloudFn, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudFn), nil
	}
}

func (c cloudFnDo) Find() ([]*model.CloudFn, error) {
	result, err := c.DO.Find()
	return result.([]*model.CloudFn), err
}

func (c cloudFnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CloudFn, err error) {
	buf := make([]*model.CloudFn, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cloudFnDo) FindInBatches(result *[]*model.CloudFn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cloudFnDo) Attrs(attrs ...field.AssignExpr) ICloudFnDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cloudFnDo) Assign(attrs ...field.AssignExpr) ICloudFnDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cloudFnDo) Joins(fields ...field.RelationField) ICloudFnDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cloudFnDo) Preload(fields ...field.RelationField) ICloudFnDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cloudFnDo) FirstOrInit() (*model.CloudFn, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudFn), nil
	}
}

func (c cloudFnDo) FirstOrCreate() (*model.CloudFn, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudFn), nil
	}
}

func (c cloudFnDo) FindByPage(offset int, limit int) (result []*model.CloudFn, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cloudFnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cloudFnDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cloudFnDo) Delete(models ...*model.CloudFn) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cloudFnDo) withDO(do gen.Dao) *cloudFnDo {
	c.DO = *do.(*gen.DO)
	return c
}
