// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package biz

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newLocalUser(db *gorm.DB, opts ...gen.DOOption) localUser {
	_localUser := localUser{}

	_localUser.localUserDo.UseDB(db, opts...)
	_localUser.localUserDo.UseModel(&model.LocalUser{})

	tableName := _localUser.localUserDo.TableName()
	_localUser.ALL = field.NewAsterisk(tableName)
	_localUser.Id = field.NewInt64(tableName, "id")
	_localUser.CreatedAt = field.NewInt64(tableName, "created_at")
	_localUser.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_localUser.Hide = field.NewInt(tableName, "hide")
	_localUser.Email = field.NewString(tableName, "email")
	_localUser.Username = field.NewString(tableName, "username")
	_localUser.DisplayName = field.NewString(tableName, "display_name")
	_localUser.Password = field.NewString(tableName, "password")
	_localUser.AvatarURL = field.NewString(tableName, "avatar_url")
	_localUser.HomepageLink = field.NewString(tableName, "homepage_link")
	_localUser.Phone = field.NewString(tableName, "phone")
	_localUser.IsAdmin = field.NewInt(tableName, "is_admin")

	_localUser.fillFieldMap()

	return _localUser
}

type localUser struct {
	localUserDo localUserDo

	ALL          field.Asterisk
	Id           field.Int64
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	Hide         field.Int
	Email        field.String
	Username     field.String
	DisplayName  field.String
	Password     field.String
	AvatarURL    field.String
	HomepageLink field.String
	Phone        field.String
	IsAdmin      field.Int

	fieldMap map[string]field.Expr
}

func (l localUser) Table(newTableName string) *localUser {
	l.localUserDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l localUser) As(alias string) *localUser {
	l.localUserDo.DO = *(l.localUserDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *localUser) updateTableName(table string) *localUser {
	l.ALL = field.NewAsterisk(table)
	l.Id = field.NewInt64(table, "id")
	l.CreatedAt = field.NewInt64(table, "created_at")
	l.UpdatedAt = field.NewInt64(table, "updated_at")
	l.Hide = field.NewInt(table, "hide")
	l.Email = field.NewString(table, "email")
	l.Username = field.NewString(table, "username")
	l.DisplayName = field.NewString(table, "display_name")
	l.Password = field.NewString(table, "password")
	l.AvatarURL = field.NewString(table, "avatar_url")
	l.HomepageLink = field.NewString(table, "homepage_link")
	l.Phone = field.NewString(table, "phone")
	l.IsAdmin = field.NewInt(table, "is_admin")

	l.fillFieldMap()

	return l
}

func (l *localUser) WithContext(ctx context.Context) ILocalUserDo {
	return l.localUserDo.WithContext(ctx)
}

func (l localUser) TableName() string { return l.localUserDo.TableName() }

func (l localUser) Alias() string { return l.localUserDo.Alias() }

func (l localUser) Columns(cols ...field.Expr) gen.Columns { return l.localUserDo.Columns(cols...) }

func (l *localUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *localUser) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["id"] = l.Id
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["hide"] = l.Hide
	l.fieldMap["email"] = l.Email
	l.fieldMap["username"] = l.Username
	l.fieldMap["display_name"] = l.DisplayName
	l.fieldMap["password"] = l.Password
	l.fieldMap["avatar_url"] = l.AvatarURL
	l.fieldMap["homepage_link"] = l.HomepageLink
	l.fieldMap["phone"] = l.Phone
	l.fieldMap["is_admin"] = l.IsAdmin
}

func (l localUser) clone(db *gorm.DB) localUser {
	l.localUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l localUser) replaceDB(db *gorm.DB) localUser {
	l.localUserDo.ReplaceDB(db)
	return l
}

type localUserDo struct{ gen.DO }

type ILocalUserDo interface {
	gen.SubQuery
	Debug() ILocalUserDo
	WithContext(ctx context.Context) ILocalUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILocalUserDo
	WriteDB() ILocalUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILocalUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILocalUserDo
	Not(conds ...gen.Condition) ILocalUserDo
	Or(conds ...gen.Condition) ILocalUserDo
	Select(conds ...field.Expr) ILocalUserDo
	Where(conds ...gen.Condition) ILocalUserDo
	Order(conds ...field.Expr) ILocalUserDo
	Distinct(cols ...field.Expr) ILocalUserDo
	Omit(cols ...field.Expr) ILocalUserDo
	Join(table schema.Tabler, on ...field.Expr) ILocalUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILocalUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILocalUserDo
	Group(cols ...field.Expr) ILocalUserDo
	Having(conds ...gen.Condition) ILocalUserDo
	Limit(limit int) ILocalUserDo
	Offset(offset int) ILocalUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILocalUserDo
	Unscoped() ILocalUserDo
	Create(values ...*model.LocalUser) error
	CreateInBatches(values []*model.LocalUser, batchSize int) error
	Save(values ...*model.LocalUser) error
	First() (*model.LocalUser, error)
	Take() (*model.LocalUser, error)
	Last() (*model.LocalUser, error)
	Find() ([]*model.LocalUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LocalUser, err error)
	FindInBatches(result *[]*model.LocalUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LocalUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILocalUserDo
	Assign(attrs ...field.AssignExpr) ILocalUserDo
	Joins(fields ...field.RelationField) ILocalUserDo
	Preload(fields ...field.RelationField) ILocalUserDo
	FirstOrInit() (*model.LocalUser, error)
	FirstOrCreate() (*model.LocalUser, error)
	FindByPage(offset int, limit int) (result []*model.LocalUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILocalUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.LocalUser, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (l localUserDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.LocalUser, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM local_users ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(l.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(l.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(l.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(l.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(l.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(l.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l localUserDo) Debug() ILocalUserDo {
	return l.withDO(l.DO.Debug())
}

func (l localUserDo) WithContext(ctx context.Context) ILocalUserDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l localUserDo) ReadDB() ILocalUserDo {
	return l.Clauses(dbresolver.Read)
}

func (l localUserDo) WriteDB() ILocalUserDo {
	return l.Clauses(dbresolver.Write)
}

func (l localUserDo) Session(config *gorm.Session) ILocalUserDo {
	return l.withDO(l.DO.Session(config))
}

func (l localUserDo) Clauses(conds ...clause.Expression) ILocalUserDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l localUserDo) Returning(value interface{}, columns ...string) ILocalUserDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l localUserDo) Not(conds ...gen.Condition) ILocalUserDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l localUserDo) Or(conds ...gen.Condition) ILocalUserDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l localUserDo) Select(conds ...field.Expr) ILocalUserDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l localUserDo) Where(conds ...gen.Condition) ILocalUserDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l localUserDo) Order(conds ...field.Expr) ILocalUserDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l localUserDo) Distinct(cols ...field.Expr) ILocalUserDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l localUserDo) Omit(cols ...field.Expr) ILocalUserDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l localUserDo) Join(table schema.Tabler, on ...field.Expr) ILocalUserDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l localUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILocalUserDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l localUserDo) RightJoin(table schema.Tabler, on ...field.Expr) ILocalUserDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l localUserDo) Group(cols ...field.Expr) ILocalUserDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l localUserDo) Having(conds ...gen.Condition) ILocalUserDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l localUserDo) Limit(limit int) ILocalUserDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l localUserDo) Offset(offset int) ILocalUserDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l localUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILocalUserDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l localUserDo) Unscoped() ILocalUserDo {
	return l.withDO(l.DO.Unscoped())
}

func (l localUserDo) Create(values ...*model.LocalUser) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l localUserDo) CreateInBatches(values []*model.LocalUser, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l localUserDo) Save(values ...*model.LocalUser) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l localUserDo) First() (*model.LocalUser, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocalUser), nil
	}
}

func (l localUserDo) Take() (*model.LocalUser, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocalUser), nil
	}
}

func (l localUserDo) Last() (*model.LocalUser, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocalUser), nil
	}
}

func (l localUserDo) Find() ([]*model.LocalUser, error) {
	result, err := l.DO.Find()
	return result.([]*model.LocalUser), err
}

func (l localUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LocalUser, err error) {
	buf := make([]*model.LocalUser, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l localUserDo) FindInBatches(result *[]*model.LocalUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l localUserDo) Attrs(attrs ...field.AssignExpr) ILocalUserDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l localUserDo) Assign(attrs ...field.AssignExpr) ILocalUserDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l localUserDo) Joins(fields ...field.RelationField) ILocalUserDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l localUserDo) Preload(fields ...field.RelationField) ILocalUserDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l localUserDo) FirstOrInit() (*model.LocalUser, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocalUser), nil
	}
}

func (l localUserDo) FirstOrCreate() (*model.LocalUser, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocalUser), nil
	}
}

func (l localUserDo) FindByPage(offset int, limit int) (result []*model.LocalUser, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l localUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l localUserDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l localUserDo) Delete(models ...*model.LocalUser) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *localUserDo) withDO(do gen.Dao) *localUserDo {
	l.DO = *do.(*gen.DO)
	return l
}
