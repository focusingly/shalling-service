// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package biz

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newBlockIPRecord(db *gorm.DB, opts ...gen.DOOption) blockIPRecord {
	_blockIPRecord := blockIPRecord{}

	_blockIPRecord.blockIPRecordDo.UseDB(db, opts...)
	_blockIPRecord.blockIPRecordDo.UseModel(&model.BlockIPRecord{})

	tableName := _blockIPRecord.blockIPRecordDo.TableName()
	_blockIPRecord.ALL = field.NewAsterisk(tableName)
	_blockIPRecord.ID = field.NewInt64(tableName, "id")
	_blockIPRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_blockIPRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_blockIPRecord.Hide = field.NewInt(tableName, "hide")
	_blockIPRecord.IPAddr = field.NewString(tableName, "ip_addr")
	_blockIPRecord.IPSource = field.NewString(tableName, "ip_source")
	_blockIPRecord.UserAgent = field.NewString(tableName, "user_agent")
	_blockIPRecord.LastRequest = field.NewInt64(tableName, "last_request")

	_blockIPRecord.fillFieldMap()

	return _blockIPRecord
}

type blockIPRecord struct {
	blockIPRecordDo blockIPRecordDo

	ALL         field.Asterisk
	ID          field.Int64
	CreatedAt   field.Int64
	UpdatedAt   field.Int64
	Hide        field.Int
	IPAddr      field.String
	IPSource    field.String
	UserAgent   field.String
	LastRequest field.Int64

	fieldMap map[string]field.Expr
}

func (b blockIPRecord) Table(newTableName string) *blockIPRecord {
	b.blockIPRecordDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b blockIPRecord) As(alias string) *blockIPRecord {
	b.blockIPRecordDo.DO = *(b.blockIPRecordDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *blockIPRecord) updateTableName(table string) *blockIPRecord {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.CreatedAt = field.NewInt64(table, "created_at")
	b.UpdatedAt = field.NewInt64(table, "updated_at")
	b.Hide = field.NewInt(table, "hide")
	b.IPAddr = field.NewString(table, "ip_addr")
	b.IPSource = field.NewString(table, "ip_source")
	b.UserAgent = field.NewString(table, "user_agent")
	b.LastRequest = field.NewInt64(table, "last_request")

	b.fillFieldMap()

	return b
}

func (b *blockIPRecord) WithContext(ctx context.Context) IBlockIPRecordDo {
	return b.blockIPRecordDo.WithContext(ctx)
}

func (b blockIPRecord) TableName() string { return b.blockIPRecordDo.TableName() }

func (b blockIPRecord) Alias() string { return b.blockIPRecordDo.Alias() }

func (b blockIPRecord) Columns(cols ...field.Expr) gen.Columns {
	return b.blockIPRecordDo.Columns(cols...)
}

func (b *blockIPRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *blockIPRecord) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 8)
	b.fieldMap["id"] = b.ID
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["hide"] = b.Hide
	b.fieldMap["ip_addr"] = b.IPAddr
	b.fieldMap["ip_source"] = b.IPSource
	b.fieldMap["user_agent"] = b.UserAgent
	b.fieldMap["last_request"] = b.LastRequest
}

func (b blockIPRecord) clone(db *gorm.DB) blockIPRecord {
	b.blockIPRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b blockIPRecord) replaceDB(db *gorm.DB) blockIPRecord {
	b.blockIPRecordDo.ReplaceDB(db)
	return b
}

type blockIPRecordDo struct{ gen.DO }

type IBlockIPRecordDo interface {
	gen.SubQuery
	Debug() IBlockIPRecordDo
	WithContext(ctx context.Context) IBlockIPRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBlockIPRecordDo
	WriteDB() IBlockIPRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBlockIPRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBlockIPRecordDo
	Not(conds ...gen.Condition) IBlockIPRecordDo
	Or(conds ...gen.Condition) IBlockIPRecordDo
	Select(conds ...field.Expr) IBlockIPRecordDo
	Where(conds ...gen.Condition) IBlockIPRecordDo
	Order(conds ...field.Expr) IBlockIPRecordDo
	Distinct(cols ...field.Expr) IBlockIPRecordDo
	Omit(cols ...field.Expr) IBlockIPRecordDo
	Join(table schema.Tabler, on ...field.Expr) IBlockIPRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBlockIPRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBlockIPRecordDo
	Group(cols ...field.Expr) IBlockIPRecordDo
	Having(conds ...gen.Condition) IBlockIPRecordDo
	Limit(limit int) IBlockIPRecordDo
	Offset(offset int) IBlockIPRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBlockIPRecordDo
	Unscoped() IBlockIPRecordDo
	Create(values ...*model.BlockIPRecord) error
	CreateInBatches(values []*model.BlockIPRecord, batchSize int) error
	Save(values ...*model.BlockIPRecord) error
	First() (*model.BlockIPRecord, error)
	Take() (*model.BlockIPRecord, error)
	Last() (*model.BlockIPRecord, error)
	Find() ([]*model.BlockIPRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BlockIPRecord, err error)
	FindInBatches(result *[]*model.BlockIPRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BlockIPRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBlockIPRecordDo
	Assign(attrs ...field.AssignExpr) IBlockIPRecordDo
	Joins(fields ...field.RelationField) IBlockIPRecordDo
	Preload(fields ...field.RelationField) IBlockIPRecordDo
	FirstOrInit() (*model.BlockIPRecord, error)
	FirstOrCreate() (*model.BlockIPRecord, error)
	FindByPage(offset int, limit int) (result []*model.BlockIPRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBlockIPRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.BlockIPRecord, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (b blockIPRecordDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.BlockIPRecord, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM block_ip_records ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(b.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(b.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(b.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(b.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(b.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(b.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b blockIPRecordDo) Debug() IBlockIPRecordDo {
	return b.withDO(b.DO.Debug())
}

func (b blockIPRecordDo) WithContext(ctx context.Context) IBlockIPRecordDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b blockIPRecordDo) ReadDB() IBlockIPRecordDo {
	return b.Clauses(dbresolver.Read)
}

func (b blockIPRecordDo) WriteDB() IBlockIPRecordDo {
	return b.Clauses(dbresolver.Write)
}

func (b blockIPRecordDo) Session(config *gorm.Session) IBlockIPRecordDo {
	return b.withDO(b.DO.Session(config))
}

func (b blockIPRecordDo) Clauses(conds ...clause.Expression) IBlockIPRecordDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b blockIPRecordDo) Returning(value interface{}, columns ...string) IBlockIPRecordDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b blockIPRecordDo) Not(conds ...gen.Condition) IBlockIPRecordDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b blockIPRecordDo) Or(conds ...gen.Condition) IBlockIPRecordDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b blockIPRecordDo) Select(conds ...field.Expr) IBlockIPRecordDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b blockIPRecordDo) Where(conds ...gen.Condition) IBlockIPRecordDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b blockIPRecordDo) Order(conds ...field.Expr) IBlockIPRecordDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b blockIPRecordDo) Distinct(cols ...field.Expr) IBlockIPRecordDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b blockIPRecordDo) Omit(cols ...field.Expr) IBlockIPRecordDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b blockIPRecordDo) Join(table schema.Tabler, on ...field.Expr) IBlockIPRecordDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b blockIPRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBlockIPRecordDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b blockIPRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IBlockIPRecordDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b blockIPRecordDo) Group(cols ...field.Expr) IBlockIPRecordDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b blockIPRecordDo) Having(conds ...gen.Condition) IBlockIPRecordDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b blockIPRecordDo) Limit(limit int) IBlockIPRecordDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b blockIPRecordDo) Offset(offset int) IBlockIPRecordDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b blockIPRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBlockIPRecordDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b blockIPRecordDo) Unscoped() IBlockIPRecordDo {
	return b.withDO(b.DO.Unscoped())
}

func (b blockIPRecordDo) Create(values ...*model.BlockIPRecord) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b blockIPRecordDo) CreateInBatches(values []*model.BlockIPRecord, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b blockIPRecordDo) Save(values ...*model.BlockIPRecord) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b blockIPRecordDo) First() (*model.BlockIPRecord, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BlockIPRecord), nil
	}
}

func (b blockIPRecordDo) Take() (*model.BlockIPRecord, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BlockIPRecord), nil
	}
}

func (b blockIPRecordDo) Last() (*model.BlockIPRecord, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BlockIPRecord), nil
	}
}

func (b blockIPRecordDo) Find() ([]*model.BlockIPRecord, error) {
	result, err := b.DO.Find()
	return result.([]*model.BlockIPRecord), err
}

func (b blockIPRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BlockIPRecord, err error) {
	buf := make([]*model.BlockIPRecord, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b blockIPRecordDo) FindInBatches(result *[]*model.BlockIPRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b blockIPRecordDo) Attrs(attrs ...field.AssignExpr) IBlockIPRecordDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b blockIPRecordDo) Assign(attrs ...field.AssignExpr) IBlockIPRecordDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b blockIPRecordDo) Joins(fields ...field.RelationField) IBlockIPRecordDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b blockIPRecordDo) Preload(fields ...field.RelationField) IBlockIPRecordDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b blockIPRecordDo) FirstOrInit() (*model.BlockIPRecord, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BlockIPRecord), nil
	}
}

func (b blockIPRecordDo) FirstOrCreate() (*model.BlockIPRecord, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BlockIPRecord), nil
	}
}

func (b blockIPRecordDo) FindByPage(offset int, limit int) (result []*model.BlockIPRecord, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b blockIPRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b blockIPRecordDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b blockIPRecordDo) Delete(models ...*model.BlockIPRecord) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *blockIPRecordDo) withDO(do gen.Dao) *blockIPRecordDo {
	b.DO = *do.(*gen.DO)
	return b
}
