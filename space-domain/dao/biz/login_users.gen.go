// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package biz

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"space-domain/model"
)

func newLoginUser(db *gorm.DB, opts ...gen.DOOption) loginUser {
	_loginUser := loginUser{}

	_loginUser.loginUserDo.UseDB(db, opts...)
	_loginUser.loginUserDo.UseModel(&model.LoginUser{})

	tableName := _loginUser.loginUserDo.TableName()
	_loginUser.ALL = field.NewAsterisk(tableName)
	_loginUser.Id = field.NewInt64(tableName, "id")
	_loginUser.CreatedAt = field.NewInt64(tableName, "created_at")
	_loginUser.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_loginUser.Hide = field.NewInt(tableName, "hide")
	_loginUser.DisplayName = field.NewString(tableName, "display_name")
	_loginUser.UserType = field.NewString(tableName, "user_type")
	_loginUser.PlatformId = field.NewInt64(tableName, "platform_id")
	_loginUser.Email = field.NewString(tableName, "email")
	_loginUser.Link = field.NewString(tableName, "link")

	_loginUser.fillFieldMap()

	return _loginUser
}

type loginUser struct {
	loginUserDo loginUserDo

	ALL         field.Asterisk
	Id          field.Int64
	CreatedAt   field.Int64
	UpdatedAt   field.Int64
	Hide        field.Int
	DisplayName field.String
	UserType    field.String
	PlatformId  field.Int64
	Email       field.String
	Link        field.String

	fieldMap map[string]field.Expr
}

func (l loginUser) Table(newTableName string) *loginUser {
	l.loginUserDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l loginUser) As(alias string) *loginUser {
	l.loginUserDo.DO = *(l.loginUserDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *loginUser) updateTableName(table string) *loginUser {
	l.ALL = field.NewAsterisk(table)
	l.Id = field.NewInt64(table, "id")
	l.CreatedAt = field.NewInt64(table, "created_at")
	l.UpdatedAt = field.NewInt64(table, "updated_at")
	l.Hide = field.NewInt(table, "hide")
	l.DisplayName = field.NewString(table, "display_name")
	l.UserType = field.NewString(table, "user_type")
	l.PlatformId = field.NewInt64(table, "platform_id")
	l.Email = field.NewString(table, "email")
	l.Link = field.NewString(table, "link")

	l.fillFieldMap()

	return l
}

func (l *loginUser) WithContext(ctx context.Context) ILoginUserDo {
	return l.loginUserDo.WithContext(ctx)
}

func (l loginUser) TableName() string { return l.loginUserDo.TableName() }

func (l loginUser) Alias() string { return l.loginUserDo.Alias() }

func (l loginUser) Columns(cols ...field.Expr) gen.Columns { return l.loginUserDo.Columns(cols...) }

func (l *loginUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *loginUser) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 9)
	l.fieldMap["id"] = l.Id
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["hide"] = l.Hide
	l.fieldMap["display_name"] = l.DisplayName
	l.fieldMap["user_type"] = l.UserType
	l.fieldMap["platform_id"] = l.PlatformId
	l.fieldMap["email"] = l.Email
	l.fieldMap["link"] = l.Link
}

func (l loginUser) clone(db *gorm.DB) loginUser {
	l.loginUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l loginUser) replaceDB(db *gorm.DB) loginUser {
	l.loginUserDo.ReplaceDB(db)
	return l
}

type loginUserDo struct{ gen.DO }

type ILoginUserDo interface {
	gen.SubQuery
	Debug() ILoginUserDo
	WithContext(ctx context.Context) ILoginUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILoginUserDo
	WriteDB() ILoginUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILoginUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILoginUserDo
	Not(conds ...gen.Condition) ILoginUserDo
	Or(conds ...gen.Condition) ILoginUserDo
	Select(conds ...field.Expr) ILoginUserDo
	Where(conds ...gen.Condition) ILoginUserDo
	Order(conds ...field.Expr) ILoginUserDo
	Distinct(cols ...field.Expr) ILoginUserDo
	Omit(cols ...field.Expr) ILoginUserDo
	Join(table schema.Tabler, on ...field.Expr) ILoginUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILoginUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILoginUserDo
	Group(cols ...field.Expr) ILoginUserDo
	Having(conds ...gen.Condition) ILoginUserDo
	Limit(limit int) ILoginUserDo
	Offset(offset int) ILoginUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILoginUserDo
	Unscoped() ILoginUserDo
	Create(values ...*model.LoginUser) error
	CreateInBatches(values []*model.LoginUser, batchSize int) error
	Save(values ...*model.LoginUser) error
	First() (*model.LoginUser, error)
	Take() (*model.LoginUser, error)
	Last() (*model.LoginUser, error)
	Find() ([]*model.LoginUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginUser, err error)
	FindInBatches(result *[]*model.LoginUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LoginUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILoginUserDo
	Assign(attrs ...field.AssignExpr) ILoginUserDo
	Joins(fields ...field.RelationField) ILoginUserDo
	Preload(fields ...field.RelationField) ILoginUserDo
	FirstOrInit() (*model.LoginUser, error)
	FirstOrCreate() (*model.LoginUser, error)
	FindByPage(offset int, limit int) (result []*model.LoginUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILoginUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.LoginUser, err error)
}

// SELECT * FROM @@table
//
//	{{if len(condList) > 0}}
//		WHERE
//		{{for index, cond := range condList}}
//			{{if index < len(condList)-1}}
//				@@cond.Column = @cond.Val AND
//			{{else}}
//				@@cond.Column = @cond.Val
//			{{end}}
//		{{end}}
//	{{end}}
//	{{if len(sortList) > 0}}
//		ORDER BY
//		{{for index, sort := range sortList}}
//			{{if index < len(sortList)-1}}
//				{{if sort.Desc}}
//					@@sort.Column DESC,
//				{{else}}
//					@@sort.Column ASC,
//				{{end}}
//			{{else}}
//				{{if sort.Desc}}
//					@@sort.Column DESC
//				{{else}}
//					@@sort.Column ASC
//				{{end}}
//			{{end}}
//		{{end}}
//	{{end}}
func (l loginUserDo) SelectWithSorts(condList []model.WhereCond, sortList []model.SortColumn) (result []model.LoginUser, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM login_users ")
	if len(condList) > 0 {
		generateSQL.WriteString("WHERE ")
		for index, cond := range condList {
			if index < len(condList)-1 {
				params = append(params, cond.Val)
				generateSQL.WriteString(l.Quote(cond.Column) + " = ? AND ")
			} else {
				params = append(params, cond.Val)
				generateSQL.WriteString(l.Quote(cond.Column) + " = ? ")
			}
		}
	}
	if len(sortList) > 0 {
		generateSQL.WriteString("ORDER BY ")
		for index, sort := range sortList {
			if index < len(sortList)-1 {
				if sort.Desc {
					generateSQL.WriteString(l.Quote(sort.Column) + " DESC, ")
				} else {
					generateSQL.WriteString(l.Quote(sort.Column) + " ASC, ")
				}
			} else {
				if sort.Desc {
					generateSQL.WriteString(l.Quote(sort.Column) + " DESC ")
				} else {
					generateSQL.WriteString(l.Quote(sort.Column) + " ASC ")
				}
			}
		}
	}

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l loginUserDo) Debug() ILoginUserDo {
	return l.withDO(l.DO.Debug())
}

func (l loginUserDo) WithContext(ctx context.Context) ILoginUserDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loginUserDo) ReadDB() ILoginUserDo {
	return l.Clauses(dbresolver.Read)
}

func (l loginUserDo) WriteDB() ILoginUserDo {
	return l.Clauses(dbresolver.Write)
}

func (l loginUserDo) Session(config *gorm.Session) ILoginUserDo {
	return l.withDO(l.DO.Session(config))
}

func (l loginUserDo) Clauses(conds ...clause.Expression) ILoginUserDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loginUserDo) Returning(value interface{}, columns ...string) ILoginUserDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loginUserDo) Not(conds ...gen.Condition) ILoginUserDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loginUserDo) Or(conds ...gen.Condition) ILoginUserDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loginUserDo) Select(conds ...field.Expr) ILoginUserDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loginUserDo) Where(conds ...gen.Condition) ILoginUserDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loginUserDo) Order(conds ...field.Expr) ILoginUserDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loginUserDo) Distinct(cols ...field.Expr) ILoginUserDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loginUserDo) Omit(cols ...field.Expr) ILoginUserDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loginUserDo) Join(table schema.Tabler, on ...field.Expr) ILoginUserDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loginUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILoginUserDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loginUserDo) RightJoin(table schema.Tabler, on ...field.Expr) ILoginUserDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loginUserDo) Group(cols ...field.Expr) ILoginUserDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loginUserDo) Having(conds ...gen.Condition) ILoginUserDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loginUserDo) Limit(limit int) ILoginUserDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loginUserDo) Offset(offset int) ILoginUserDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loginUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILoginUserDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loginUserDo) Unscoped() ILoginUserDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loginUserDo) Create(values ...*model.LoginUser) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loginUserDo) CreateInBatches(values []*model.LoginUser, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loginUserDo) Save(values ...*model.LoginUser) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loginUserDo) First() (*model.LoginUser, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginUser), nil
	}
}

func (l loginUserDo) Take() (*model.LoginUser, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginUser), nil
	}
}

func (l loginUserDo) Last() (*model.LoginUser, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginUser), nil
	}
}

func (l loginUserDo) Find() ([]*model.LoginUser, error) {
	result, err := l.DO.Find()
	return result.([]*model.LoginUser), err
}

func (l loginUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginUser, err error) {
	buf := make([]*model.LoginUser, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loginUserDo) FindInBatches(result *[]*model.LoginUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loginUserDo) Attrs(attrs ...field.AssignExpr) ILoginUserDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loginUserDo) Assign(attrs ...field.AssignExpr) ILoginUserDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loginUserDo) Joins(fields ...field.RelationField) ILoginUserDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loginUserDo) Preload(fields ...field.RelationField) ILoginUserDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loginUserDo) FirstOrInit() (*model.LoginUser, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginUser), nil
	}
}

func (l loginUserDo) FirstOrCreate() (*model.LoginUser, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginUser), nil
	}
}

func (l loginUserDo) FindByPage(offset int, limit int) (result []*model.LoginUser, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loginUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loginUserDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loginUserDo) Delete(models ...*model.LoginUser) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loginUserDo) withDO(do gen.Dao) *loginUserDo {
	l.DO = *do.(*gen.DO)
	return l
}
